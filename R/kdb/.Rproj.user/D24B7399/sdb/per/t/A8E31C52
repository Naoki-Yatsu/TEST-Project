{
    "contents" : "#\n# ========================================================\n#    xtsテスト\n# ========================================================\n\nlibrary(xts)\ndata(sample_matrix)\n#その名の通り行列形式でデータが入っている\nhead(sample_matrix)\n\n#xtsオブジェクトへ！\nsample.xts <- as.xts(sample_matrix, descr='テストデータです')\n#zooパッケージのクラスとxtsクラスの属性を持っているようだ\nclass(sample.xts)\nstr(sample.xts)\n\n#headを使うとdescrの属性の値は見えないので、無理やりだしてみる。\nhead(sample.xts) \nattr(sample.xts,'descr')\n\n#いろいろなデータの抜き方\n#2007年全部（このデータだともともと2007年のデータしかないが・・・\nsample.xts['2007']\n#2007年3月1日以降のデータ\nsample.xts['2007-03::']\n#2007年3月1日～2007年4月30日までのデータ（ちょっと不思議な挙動）\nsample.xts['2007-03::2007-04']\n#こう書くと2007年3月1日～2007年4月1日までのデータ\nsample.xts['2007-03::2007-04-01']\n#データの最初っから2007年1月31日まで\nsample.xts['::2007-01-31'] \n#2007年1月3日のデータだけ\nsample.xts['2007-01-03']\n\n\n\n\n#月末がどのインデックスになるのか？を抜いてくる関数。超便利。\n#'on'オプションで指定すれば年、週、日、秒等等もいける。\nindex.monthlast <- endpoints(sample.xts)\n#月末だけのデータを取得\nsample.xts[index.monthlast]\n\n#period.～関数群。↑のendpoints関数とあわせて使うと強力\n#期間を指定して、その範囲内でmax,min,sum,などを計算する。period.applyを使えば自作関数も。\n#各月ごとの1列目の値の和\nperiod.sum(sample.xts[,1],endpoints(sample.xts))\n#各月ごとの1列目の値の最大値\nperiod.max(sample.xts[,1],endpoints(sample.xts))\n#period.applyで上と同じ動作を\nperiod.apply(sample.xts[,1],endpoints(sample.xts),function(x_){max(x_)})\n\n#さらに、各日・月・週・四半期・年ごとに処理をapplyしちゃう関数群もある。\n#要するに上の関数をさらにendpointsなしに圧縮して書くことができる。\n#各月ごとの１列目の最大値\napply.monthly(sample.xts[,1],max)\n#各週ごとの１列目の平均値\napply.weekly(sample.xts[,1],mean)\n\n#Rにデフォルトで入っていてもよさそうな、データの初めの要素と終わりの要素を抜く関数もあった\n#いちいちhead(x,1)みたいに書くのめんどいよね。\nfirst(sample.xts)\nlast(sample.xts)\n\n#データが何日・年・四半期分あるか。\nndays(sample.xts)\nnyears(sample.xts)\nnquarters(sample.xts)\n\n\n# ========================================================\n#    xtsテスト2\n# ========================================================\n\nlibrary(xts)\n#前回同様、サンプル行列で試す\ndata(sample_matrix)\nsample.xts <- as.xts(sample_matrix)\n\n#lag関数を使えば日付を１日ずらすことができる。\nlag(sample.xts)\n#例えばリターンを計算したいなら以下のようにすればOK\nsample.xts/lag(sample.xts)-1\n\n#↓記事１では以下のように月末時のデータを抜いたが、もうちょっと汎用的な関数があった\n#index.monthlast <- endpoints(sample.xts)\n#sample.xts[index.monthlast]\n#月末だけのデータを取得。\n#ここで注意したいのがOLHC（Open,Low,High,Close)データだと、月単位でOHLCを計算してくれること\nto.monthly(sample.xts)\n#週次も同様で週ごとでOLHCしてくれる\nto.weekly(sample.xts)\nto.period(sample.xts,period=\"weeks\")\n\n#日付型を作る関数firstof lastof.\n#2000年初日を作成\nfirstof(2000)\n#2007年10月末を作成\nlastof(2007,10)\n\n#データの日時のみを抽出するにはindex関数を使う.この状態で日次の変更もできる\nindex(sample.xts)\nindex(sample.xts)[1] <- as.POSIXct(\"2010-01-01 11:11:11\")\nhead(sample.xts)\n#日時の型を調べる\nindexClass(sample.xts)\n\n#mergeでデータ合体できる\nx <- xts(4:10, Sys.Date()+4:10)\ny <- xts(1:6, Sys.Date()+1:6)\n#SQLでいうインナージョインやレフト・ライトジョインも可能\nmerge(x,y)\nmerge(x,y, join='inner')\nmerge(x,y, join='left')\nmerge(x,y, join='right')\n#mergeは列で結合するが、rbindだと行ごとに結合\nrbind(x,y)\n\n#欠損値を補間する関数もある。zooパッケージの関数na.locfをさらにgenericに。\n#以下マニュアルより。\nx <- xts(1:10, Sys.Date()+1:10)\nx[c(1,2,5,9,10)] <- NA\nx\n#時系列的な意味でその値の直近値で値を補間\nna.locf(x)\n#↑の逆。次の日の値で今日の値を置くイメージ\nna.locf(x, fromLast=TRUE)#\n\n\n# ========================================================\n#    ggplot version of charts.PerformanceSummary\n# ========================================================\n# http://stackoverflow.com/questions/14817006/ggplot-version-of-charts-performancesummary\n\n# Before\nrequire(xts)\nX.stock.rtns <- xts(rnorm(1000,0.00001,0.0003), Sys.Date()-(1000:1))\nY.stock.rtns <- xts(rnorm(1000,0.00003,0.0004), Sys.Date()-(1000:1))\nZ.stock.rtns <- xts(rnorm(1000,0.00005,0.0005), Sys.Date()-(1000:1))\nrtn.obj <- merge(X.stock.rtns , Y.stock.rtns, Z.stock.rtns)\ncolnames(rtn.obj) <- c(\"x.stock.rtns\",\"y.stock.rtns\",\"z.stock.rtns\")\n\nrequire(PerformanceAnalytics)\ncharts.PerformanceSummary(rtn.obj, geometric=TRUE)\n\n\n#\n# first try\n#\nrequire(xts)\n\nX.stock.rtns <- xts(rnorm(1000,0.00001,0.0003), Sys.Date()-(1000:1))\nY.stock.rtns <- xts(rnorm(1000,0.00003,0.0004), Sys.Date()-(1000:1))\nZ.stock.rtns <- xts(rnorm(1000,0.00005,0.0005), Sys.Date()-(1000:1))\nrtn.obj <- merge(X.stock.rtns , Y.stock.rtns, Z.stock.rtns)\ncolnames(rtn.obj) <- c(\"x\",\"y\",\"z\")\n\n# advanced charts.PerforanceSummary based on ggplot\ngg.charts.PerformanceSummary <- function(rtn.obj, geometric = TRUE, main = \"\", plot = TRUE)\n{\n    \n    # load libraries\n    suppressPackageStartupMessages(require(ggplot2))\n    suppressPackageStartupMessages(require(scales))\n    suppressPackageStartupMessages(require(reshape))\n    suppressPackageStartupMessages(require(PerformanceAnalytics))\n    \n    # create function to clean returns if having NAs in data\n    clean.rtn.xts <- function(univ.rtn.xts.obj,na.replace=0){\n        univ.rtn.xts.obj[is.na(univ.rtn.xts.obj)]<- na.replace\n        univ.rtn.xts.obj  \n    }\n    \n    # Create cumulative return function\n    cum.rtn <- function(clean.xts.obj, g = TRUE)\n    {\n        x <- clean.xts.obj\n        if(g == TRUE){y <- cumprod(x+1)-1} else {y <- cumsum(x)}\n        y\n    }\n    \n    # Create function to calculate drawdowns\n    dd.xts <- function(clean.xts.obj, g = TRUE)\n    {\n        x <- clean.xts.obj\n        if(g == TRUE){y <- Drawdowns(x)} else {y <- Drawdowns(x,geometric = FALSE)}\n        y\n    }\n    \n    # create a function to create a dataframe to be usable in ggplot to replicate charts.PerformanceSummary\n    cps.df <- function(xts.obj,geometric)\n    {\n        x <- clean.rtn.xts(xts.obj)\n        series.name <- colnames(xts.obj)[1]\n        tmp <- cum.rtn(x,geometric)\n        tmp$rtn <- x\n        tmp$dd <- dd.xts(x,geometric)\n        colnames(tmp) <- c(\"Index\",\"Return\",\"Drawdown\") # names with space\n        tmp.df <- as.data.frame(coredata(tmp))\n        tmp.df$Date <- as.POSIXct(index(tmp))\n        tmp.df.long <- melt(tmp.df,id.var=\"Date\")\n        tmp.df.long$asset <- rep(series.name,nrow(tmp.df.long))\n        tmp.df.long\n    }\n    \n    # A conditional statement altering the plot according to the number of assets\n    if(ncol(rtn.obj)==1)\n    {\n        # using the cps.df function\n        df <- cps.df(rtn.obj,geometric)\n        # adding in a title string if need be\n        if(main == \"\"){\n            title.string <- paste(\"Asset Performance\")\n        } else {\n            title.string <- main\n        }\n        \n        gg.xts <- ggplot(df, aes_string( x = \"Date\", y = \"value\", group = \"variable\" )) +\n            facet_grid(variable ~ ., scales = \"free_y\", space = \"fixed\") +\n            geom_line(data = subset(df, variable == \"Index\")) +\n            geom_bar(data = subset(df, variable == \"Return\"), stat = \"identity\") +\n            geom_line(data = subset(df, variable == \"Drawdown\")) +\n            geom_hline(yintercept = 0, size = 0.5, colour = \"black\") +\n            ggtitle(title.string) +\n            theme(axis.text.x = element_text(angle = 0, hjust = 1)) +\n            scale_x_datetime(breaks = date_breaks(\"6 months\"), labels = date_format(\"%m/%Y\")) +\n            ylab(\"\") +\n            xlab(\"\")\n        \n    } \n    else \n    {\n        # a few extra bits to deal with the added rtn columns\n        no.of.assets <- ncol(rtn.obj)\n        asset.names <- colnames(rtn.obj)\n        df <- do.call(rbind,lapply(1:no.of.assets, function(x){cps.df(rtn.obj[,x],geometric)}))\n        df$asset <- ordered(df$asset, levels=asset.names)\n        if(main == \"\"){\n            title.string <- paste(\"Asset\",asset.names[1],asset.names[2],asset.names[3],\"Performance\")\n        } else {\n            title.string <- main\n        }\n        \n        if(no.of.assets>5){legend.rows <- 5} else {legend.rows <- no.of.assets}\n        \n        gg.xts <- ggplot(df, aes_string(x = \"Date\", y = \"value\" )) +\n            \n            # panel layout\n            facet_grid(variable~., scales = \"free_y\", space = \"fixed\", shrink = TRUE, drop = TRUE, margin = \n                           , labeller = label_value) + # label_value is default\n            \n            # display points for Index and Drawdown, but not for Return\n            geom_point(data = subset(df, variable == c(\"Index\",\"Drawdown\"))\n                       , aes(colour = factor(asset), shape = factor(asset)), size = 1.2, show_guide = TRUE) + \n            \n            # manually select shape of geom_point\n            scale_shape_manual(values = c(1,2,3)) + \n            \n            # line colours for the Index\n            geom_line(data = subset(df, variable == \"Index\"), aes(colour = factor(asset)), show_guide = FALSE) +\n            \n            # bar colours for the Return\n            geom_bar(data = subset(df,variable == \"Return\"), stat = \"identity\"\n                     , aes(fill = factor(asset), colour = factor(asset)), position = \"dodge\", show_guide = FALSE) +\n            \n            # line colours for the Drawdown\n            geom_line(data = subset(df, variable == \"Drawdown\"), aes(colour = factor(asset)), show_guide = FALSE) +\n            \n            # horizontal line to indicate zero values\n            geom_hline(yintercept = 0, size = 0.5, colour = \"black\") +\n            \n            # horizontal ticks\n            scale_x_datetime(breaks = date_breaks(\"6 months\"), labels = date_format(\"%m/%Y\")) +\n            \n            # main y-axis title\n            ylab(\"\") +\n            \n            # main x-axis title\n            xlab(\"\") +\n            \n            # main chart title\n            ggtitle(title.string)\n        \n        # legend \n        \n        gglegend <- guide_legend(override.aes = list(size = 3))\n        \n        gg.xts <- gg.xts + guides(colour = gglegend, size = \"none\") +\n            \n            # gglegend <- guide_legend(override.aes = list(size = 3), direction = \"horizontal\") # direction overwritten by legend.box?\n            # gg.xts <- gg.xts + guides(colour = gglegend, size = \"none\", shape = gglegend) + # Warning: \"Duplicated override.aes is ignored\"\n            \n            theme( legend.title = element_blank()\n                   , legend.position = c(0,1)\n                   , legend.justification = c(0,1)\n                   , legend.background = element_rect()\n                   , legend.box = \"horizontal\" # not working?\n                   , axis.text.x = element_text(angle = 0, hjust = 1)\n            )\n        \n    }\n    \n    assign(\"gg.xts\", gg.xts,envir=.GlobalEnv)\n    if(plot == TRUE){\n        plot(gg.xts)\n    } else {}\n    \n}\n\n# display chart\ngg.charts.PerformanceSummary(rtn.obj, geometric = TRUE)\n\n\n\n\n\n\n\n",
    "created" : 1410711939366.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "500584774",
    "id" : "A8E31C52",
    "lastKnownWriteTime" : 1410879588,
    "path" : "J:/git/algorithm-trading-system/algorithm-trading-system/R/kdb/test_xts.R",
    "project_path" : "test_xts.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "source_on_save" : false,
    "type" : "r_source"
}