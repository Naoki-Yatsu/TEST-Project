geom_bar(data = subset(df,variable == "Return"), stat = "identity"
, aes(fill = factor(asset), colour = factor(asset)), position = "dodge", show_guide = FALSE) +
# line colours for the Drawdown
geom_line(data = subset(df, variable == "Drawdown"), aes(colour = factor(asset)), show_guide = FALSE) +
# horizontal line to indicate zero values
geom_hline(yintercept = 0, size = 0.5, colour = "black") +
# horizontal ticks
scale_x_datetime(breaks = date_breaks("6 months"), labels = date_format("%m/%Y")) +
# main y-axis title
ylab("") +
# main x-axis title
xlab("") +
# main chart title
ggtitle(title.string)
# legend
gglegend <- guide_legend(override.aes = list(size = 3))
gg.xts <- gg.xts + guides(colour = gglegend, size = "none") +
# gglegend <- guide_legend(override.aes = list(size = 3), direction = "horizontal") # direction overwritten by legend.box?
# gg.xts <- gg.xts + guides(colour = gglegend, size = "none", shape = gglegend) + # Warning: "Duplicated override.aes is ignored"
theme( legend.title = element_blank()
, legend.position = c(0,1)
, legend.justification = c(0,1)
, legend.background = element_rect()
, legend.box = "horizontal" # not working?
, axis.text.x = element_text(angle = 0, hjust = 1)
)
}
my_labeller <- function(var, value){ # from the R Cookbook
value <- as.character(value)
if (var=="variable")
{
value[value=="Index"] <- "Cumulative Returns"
value[value=="Return"] <- "Daily Returns"
value[value=="Drawdown"] <- "Drawdown"
}
return(value)
}
theme( legend.title = element_blank()
, legend.position = c(0,1)
, legend.justification = c(0,1)
, legend.background = element_rect()
#, legend.key = element_rect(fill="white",colour="white")# added as afterthought
, legend.box = "horizontal" # not working?
, axis.text.x = element_text(angle = 0, hjust = 1)
#, axis.title.y = element_text(size=2,colour="black")
, strip.background = element_rect(fill = 'white')
, panel.background = element_rect(fill = 'white', colour = 'white')
, panel.grid.major = element_line(colour = "grey", size = 0.5)
, panel.grid.minor = element_line(colour = NA, size = 0.0)
)
assign("gg.xts", gg.xts,envir=.GlobalEnv)
if(plot == TRUE){
plot(gg.xts)
} else {}
}
gg.charts.PerformanceSummary(rtn.obj, geometric = TRUE)
install.packages("reshape")
suppressPackageStartupMessages
charts.PerformanceSummary(rtn.obj, geometric=TRUE)
library("xts", lib.loc="~/R/win-library/3.1")
library("quantmod", lib.loc="~/R/win-library/3.1")
# load q server
source("c:/r/qServer.R")
Sys.setenv(TZ="GMT")
h <-open_connection("127.0.0.1",5013,":")
execute(h, "tables[]")
execute(h, "100#select from MarketData where date=2014.01.02")
query <- "`time xasc select time:`timestamp$marketDateTime, price:bid from MarketData where date=2014.01.10, sym=`USDJPY"
query <- "`time xasc select time:`timestamp$marketDateTime, price:bid from MarketData where date=2014.01.10, sym=`USDJPY"
fxdata <- execute(h, query)
View(fxdata)
Sys.time()
options(digits.secs=3)
Sys.time()
fxdata <- execute(h, query)
View(fxdata)
GetCurrentMilliseconds()
View(fxdata)
fxdata.xts <-xts(fxdata[,-1], order.by=res[,'time'])
fxdata.xts <-xts(fxdata[,-1], order.by=fxdata[,'time'])
View(fxdata.xts)
fxdata[,-1]
fxdata[,'time']
fxdata.xts <- as.xts(fxdata)
fxdata.xts <-xts(fxdata[,-1], order.by=fxdata[,'time'])
View(fxdata.xts)
View(fxdata.xts)
# load q server
source("c:/r/qServer.R")
Sys.setenv(TZ="GMT")
# milisec
options(digits.secs=3)
h <- open_connection("127.0.0.1",5013,":")
fxdata.xts <-xts(fxdata[,-1], order.by=fxdata[,'time'])
require(quantmod)
fxdata.xts <-xts(fxdata[,-1], order.by=fxdata[,'time'])
View(fxdata.xts)
query <- "getOHLCTick[dates; symbol; 100]"
fxdata <- execute(h, query)
fxdata.xts <-xts(fxdata[,-1], order.by=fxdata[,'time'])
View(fxdata)
View(fxdata.xts)
View(fxdata)
View(fxdata.xts)
fxdata[,-1]
fxdata.xts <- as.xts(fxdata)
fxdata.xts <-xts(fxdata[,-1], order.by=fxdata[,'time'])
candlecolors <- ifelse(res.xts[,'close'] > res.xts[,'open'], 'GREEN', 'RED')
candlecolors <- ifelse(res.xts[,'close'] > res.xts[,'open'], 'GREEN', 'RED')
candlecolors <- ifelse(fxdata.xts[,'close'] > fxdata.xts[,'open'], 'GREEN', 'RED')
plot.xts(fxdata.xts, type='candles', width=100,candle.col=candlecolors,bar.col ='BLACK',xlab="time",ylab="price",main="TEST")
par(xaxt="n")
plot.xts(res.xts,type='candles',width=100,candle.col=candlecolors,bar.col ='BLACK',xlab="time",ylab="price",main="TEST")
par(xaxt="s")
plot.xts(fxdata.xts, type='candles', width=100,candle.col=candlecolors,bar.col ='BLACK',xlab="time",ylab="price",main="TEST")
par(xaxt="n")
plot.xts(fxdata.xts, type='candles', width=100,candle.col=candlecolors,bar.col ='BLACK',xlab="time",ylab="price",main="TEST")
axis.Date(side=1, x=res[,1], format="%Y-%m-%d %H:%M")
fxdata.xts[,1]
axis.Date(side=1, x=fxdata.xts[,1], format="%Y-%m-%d %H:%M")
axis.Date
par
help(par)
help(axis.Date)
axis.POSIXct(side=1, x=fxdata.xts[,1], format="%Y-%m-%d %H:%M")
View(fxdata)
fxdata.xts[,1]
View(fxdata.xts)
frame()
par(xaxt="n")
plot.xts(fxdata.xts, type='candles', width=100,candle.col=candlecolors,bar.col ='BLACK',xlab="time",ylab="price",main="TEST")
par(xaxt="s")
axis.Date(side=1, x=fxdata.xts[,1], format="%Y-%m-%d %H:%M")
Sys.time()
typeof(Sys.time())
class(Sys.time())
as.Date(Sys.time())
class(as.Date(Sys.time()))
help(date-time)
class(fxdata.xts[1,1])
fxdata.xts[1,1]
fxdata.xts[1,0]
class(fxdata.xts[1,0])
indexClass(fxdata.xts)
POSIXct
help(POSIXct)
summary(fxdata.xts[1,0])
print(fxdata.xts[1,0])
fxdata.xts[1,0].summary()
(fxdata.xts[1,0]).summary()
fxdata.xts[,1]
axis.POSIXct(side=1, x=fxdata.xts[,0], format="%Y-%m-%d %H:%M")
fxdata.xts[,0]
class(fxdata.xts[,0])
class(fxdata.xts[,0])
class(fxdata.xts[0,0])
class(fxdata.xts[0,0])
fxdata.xts[0,0]
fxdata.xts[1,0]
fxdata.xts[1:10,0]
class8fxdata.xts[1:10,0])
class(fxdata.xts[1:10,0])
indexClass(fxdata.xts)
index(fxdata.xts)
class(index(fxdata.xts))
axis.POSIXct(side=1, x=index(fxdata.xts), format="%Y-%m-%d %H:%M")
axis.POSIXct(side=1, x=index(fxdata.xts), format="%H:%M")
par(xaxt="n")
axis.POSIXct(side=1, x=index(fxdata.xts), format="%H:%M")
plot.xts(fxdata.xts, type='candles', width=100,candle.col=candlecolors,bar.col ='BLACK',xlab="time",ylab="price",main="TEST")
par(xaxt="n")
plot.xts(fxdata.xts, type='candles', width=100,candle.col=candlecolors,bar.col ='BLACK',xlab="time",ylab="price",main="TEST")
par(xaxt="s")
axis.POSIXct(side=1, x=index(fxdata.xts), format="%H:%M")
class(index(fxdata.xts))
Sys.time()
Sys.time() - 1000
Sys.time() - 3600
print(Sys.time(), tz="JUST")
print(Sys.time(), tz="JST")
print(Sys.time(), tz="PST9BST")
help(POSIXCT)
help(POSIXct)
Sys.time() - Sys.time()
format(Sys.time(), "%H:%M:%OS3")
format(Sys.time(), "%H:%M:%OS6")
View(fxdata.xts)
POSIXt
Sys.getenv()
Sys.setenv(format="%d.%m.%Y %H:%M:%S")
Sys.time()
Sys.getenv()
chartSeries(fxdata.xts)
addSMA(100)
addEMA(20, col="blue")
install.packages("Quandl")
install.packages("PerformanceAnalytics")
zooom()
zoomChart()
install.packages("xtsExtra")
install.packages("xtsExtra")
install.packages("xtsExtra", repos="http://R-Forge.R-project.org")
library("xlsxjars", lib.loc="~/R/win-library/3.1")
detach("package:xlsxjars", unload=TRUE)
library("xtsExtra", lib.loc="~/R/win-library/3.1")
?xtsEtra
?xtsExtra
?xtsExtra
?xtsExtra::plot.xts
xtsExtra::plot.xts
plot.xts(res.xts,type='candles',width=100,candle.col=candlecolors,bar.col ='BLACK',xlab="time",ylab="price",main="TEST")
plot.xts(fxdata.xts, type='candles', width=100,candle.col=candlecolors,bar.col ='BLACK',xlab="time",ylab="price",main="TEST")
plot.xts(fxdata.xts, type='candles', width=100,candle.col=candlecolors,bar.col ='BLACK',xlab="time",ylab="price",main="TEST")
plot(fxdata.xts)
plot
plot(fxdata.xts, type = "candels")
EuStockMarkets
plot(EuStockMarkets)
class(EuStockMarkets)
view(EuStockMarkets)
str(EuStockMarkets)
plot.ts(fxdata.xts)
class(fxdata.xts)
class(fxdata)
ts(fxdata)
class(ts(fxdata))
plot(ts(fxdata))
install.packages(c("DBI", "mime"))
install.packages("lattice")
library("lattice", lib.loc="~/R/win-library/3.1")
detach("package:lattice", unload=TRUE)
install.packages("TFX")
library("TFX", lib.loc="~/R/win-library/3.1")
QueryTrueFX()
detach("package:TFX", unload=TRUE)
View(fxdata.xts)
library("xts", lib.loc="~/R/win-library/3.1")
View(fxdata.xts)
par(xaxt="n")
plot.xts(fxdata.xts, type='candles', width=100,candle.col=candlecolors,bar.col ='BLACK',xlab="time",ylab="price",main="TEST")
par(xaxt="s")
axis.POSIXct(side=1, x=index(fxdata.xts), format="%Y-%m-%d %H:%M")
axis.POSIXct(side=1, x=index(fxdata.xts), format="%H:%M")
chartSeries(fxdata.xts)
chartSeries(fxdata.xts)
require(quantmod)
chartSeries(fxdata.xts)
zooom()
chartSeries(closes,theme=chartTheme("white"),TA=c(addBBands(),addTA(RSI( closes)),addTA(ROC(closes))))
chartSeries(fxdata.xts)
par(xaxt="n")
chartSeries(fxdata.xts)
axis.POSIXct(side=1, x=index(fxdata.xts), format="%Y-%m-%d %H:%M")
axis.POSIXct(side=1, x=index(fxdata.xts), format="%H:%M")
par(xaxt="s")
axis.POSIXct(side=1, x=index(fxdata.xts), format="%H:%M")
chartSeries(fxdata.xts)
Sys.time()
Sys.time()
as.POSIXlt(Sys.time(), format="%Y-%m-%d %H:%M")
str(Sys.time())
help(format)
class(Sys.time())
POSIXct
POSIXt
str(POSIXct)
help(POSIXct)
View(fxdata.xts)
View(fxdata.xts)
fxdata.xts.open
fxdata.xts$open
fxdata.xts[open]
fxdata.xts[,1
]
fxdata.xts[,1]
fxdata.xts[,2]
fxdata.xts[2,2]
fxdata.xts[3,2]
source("c:/r/qServer.R")
Sys.setenv(TZ="GMT")
fxdata.xts[2,2]
fxdata.xts[2,2]
View(fxdata.xts)
install.packages(c("quantmod", "Rcpp"))
library("quantmod", lib.loc="~/R/win-library/3.1")
getFX("EUR/USD")
getSymbols("N225")
getSymbols("^N225")
getSymbols("^N225")
getSymbols("DEXJPUS, src="FRED")
getSymbols("DEXJPUS, src="FRED")
getSymbols("DEXJPUS", src="FRED")
View(`N225`)
View(EURUSD)
View(DEXJPUS)
View(EURUSD)
View(`N225`)
View(EURUSD)
getFX("USDJPY")
getFX("USD/JPY")
View(USDJPY)
View(EURUSD)
install.packages("Quantdl")
install.packages("Quandl")
View(USDJPY)
View(EURUSD)
View(USDJPY)
USDJPY
USDJPY["2014"]
USDJPY["2014-01"]
USDJPY["2014-01::"]
ccf
USDJPY["2014-01::"]
corr
ccf(USDJPY, EURUSD)
ccf(USDJPY, EURUSD)
USD
USDJPY
EURUSD
USDJPY["USD.JPY"]
cl(USDJPY)
getSymbols("SPY;IEF")
View(SPY)
View(IEF)
Cl(SPY)
View(SPY)
Cl
drop(Cl(SPY))
drop
drop(USDJPY)
ccf(drop(Cl(SPY)),drop(Cl(IEF)))
drop(USDJPY), drop(EURUSD)
ccf(drop(USDJPY), drop(EURUSD))
ccf(drop(Cl(SPY)),drop(Cl(IEF)))
View(`N225`)
cl(N225)
cl(N225)
View(`N225`)
cl(N225)
Cl(SPY)
Cl(N225)
cl(N225)
Cl(N225)
c1(N225)
cl(N225)
Cl(N225)
Cl
Cl(N225)
Cl(N225)
ccf(drop(USDJPY), drop(Cl(N225)))
View(`N225`)
View(USDJPY)
View(`N225`)
getSymbols("DOW")
View(DOW)
ccf(drop(Cl(DOW)), drop(Cl(N225)))
acf(drop(USDJPY))
ccf(drop(USDJPY), drop(USDJPY))
ccf(drop(USDJPY), drop(USDJPY))
acf(drop(USDJPY))
ccf(drop(USDJPY), drop(USDJPY))
acf(drop(USDJPY))
ccf(drop(USDJPY), drop(USDJPY))
acf(drop(USDJPY))
View(SPY)
View(SPY)
View(SPY)
rm
rm(SPY)
rm(IEF)
# load q server
source("c:/r/qServer.R")
Sys.setenv(TZ="GMT")
options(digits.secs=3)
h     <- open_connection("192.168.0.55",5013,":")
execute(h, "tables[]")
query <- "`time xasc select time:`timestamp$marketDateTime, price:bid from MarketData where date=2014.01.10, sym=`USDJPY"
require(quantmod)
fxdata <- execute(h, query)
fxdata.xts <-xts(fxdata[,-1], order.by=fxdata[,'time'])
View(fxdata.xts)
View(fxdata.xts)
library("xts", lib.loc="~/R/win-library/3.1")
detach("package:xts", unload=TRUE)
library("xts", lib.loc="~/R/win-library/3.1")
ccf
ccf(drop(USDJPY), drop(USDJPY))
ccf(drop(USDJPY), drop(USDJPY), plot=FALSZE)
ccf(drop(USDJPY), drop(USDJPY), plot=FALSE)
endpoints
endpoints(fxdata.xts, on="seconds")
endpoints(fxdata.xts, on="seconds")
acf(drop(USDJPY))
rnom(100)
norm(100)
norm
norm(1)
rnorm(100)
100+ rnorm(100)
fxdata
View(USDJPY)
UDSJPY
USDJPY
USDJPY[0]
USDJPY[1]
USDJPY[1,]
USDJPY[,0]
USDJPY[,0]
View(fxdata.xts)
acf(drop(fxdata.xts))
View(USDJPY)
View(fxdata.xts)
pereiod.a
library("quantmod", lib.loc="~/R/win-library/3.1")
endpoints(fxdata.xts, on ="secs" )
endpoints(fxdata.xts, on ="seconds" )
endpoints(fxdata.xts, on ="seconda" )
endpoints(fxdata.xts, on ="seconds" )
endpoints(fxdata.xts, on ="seconds" )
acf(drop(fxdata.xts))
last(c(1,2,3))
last(c(1,2,3,2))
period.apply(fxdata.xts, INDEX = endpoints(fxdata.xts, on ="seconds" ), FUN = last)
fxdata.xts.sec <- period.apply(fxdata.xts, INDEX = endpoints(fxdata.xts, on ="seconds" ), FUN = last)
acf(fxdata.xts.sec)
acf(drop(fxdata.xts.sec))
fxdata.xts.min <- period.apply(fxdata.xts, INDEX = endpoints(fxdata.xts, on ="minutes" ), FUN = last)
acf(drop(fxdata.xts.min))
View(fxdata.xts.min)
acf
to.minutes(fxdata.xts)
fxdata.xts[,0]
fxdata.xts[,0] + 09:00
last(c(1,2,3,2))
fxdata.xts[,0] + 09:00
to.minutes(fxdata.xts)
Sys.getenv(TZ)
Sys.getenv("TZ")
Sys.getenv()
head(fxdata.xts[,0])
head(fxdata.xts[,0])
head(fxdata.xts[,0],10)
head
head(fxdata.xts[,0])
head(fxdata.xts[,0])
fxdata.xts[,0]
head(fxdata.xts[,0], 3)
head(fxdata.xts, 3)
head(fxdata.xts, 5)
head(fxdata.xts[,0], 5)
head(fxdata[,0], 5)
head(fxdata[,0], 5)
head(fxdata[,0], 5)
fxdata["time"]
head(fxdata["time"])
head(fxdata["time"]) + 1000
head(fxdata["time"]) + 3600
head(fxdata.xts["time"])
head(fxdata.xts["index"])
indexTZ(fxdata.xts)
tzone(fxdata.xts) <- "Asia/Tokyo"
indexTZ(fxdata.xts)
head(fxdata.xts["index"])
head(fxdata.xts)
head(fxdata.xts)
timezone()
Sys.timezone()
indexTZ(fxdata.xts)
tzone(fxdata.xts) <- "GMT"
indexTZ(fxdata.xts)
help(time )
help(Sys.time)
temptimes <- head(fxdata[,0], 5)
temptimes
View(temptimes)
View(temptimes)
head(fxdata[,0], 5)
head(fxdata["time"], 5)
temptimes <- head(fxdata["time"], 5)
temptimes <- head(fxdata["time"], 5)
temptimes
temptimes + 3600
indexTZ(fxdata.xts)
x <- xts(1:10, Sys.Date()+1:10)
x
indexTZ(x)
tzone(x)
str(x)
Old.TZ <- Sys.getenv("TZ")
Old.TZ <- Sys.getenv("TZ")
Sys.setenv(TZ="America/Chicago")
x
Sys.setenv(TZ=Old.TZ)
Sys.timezone()
x
x <- xts(1:10, Sys.time()+1:10)
x
indexTZ(x)
tzone(x)
str(x)
x
Old.TZ <- Sys.getenv("TZ")
Sys.setenv(TZ="America/Chicago")
x
Sys.setenv(TZ=Old.TZ)
x
indexClass(x)
to.minutes(fxdata.xts)
head(to.minutes(fxdata.xts))
to.minutes
align.time(fxdata.xts.sec)
align.time(fxdata.xts.sec, n=10)
