, legend.justification = c(0,1)
, legend.background = element_rect()
, legend.box = "horizontal" # not working?
, axis.text.x = element_text(angle = 0, hjust = 1)
)
}
assign("gg.xts", gg.xts,envir=.GlobalEnv)
if(plot == TRUE){
plot(gg.xts)
} else {}
}
gg.charts.PerformanceSummary(rtn.obj, geometric = TRUE)
gg.charts.PerformanceSummary <- function(rtn.obj, geometric = TRUE, main = "", plot = TRUE) {
# load libraries
suppressPackageStartupMessages(require(ggplot2))
suppressPackageStartupMessages(require(scales))
suppressPackageStartupMessages(require(reshape))
suppressPackageStartupMessages(require(PerformanceAnalytics))
# create function to clean returns if having NAs in data
clean.rtn.xts <- function(univ.rtn.xts.obj,na.replace=0){
univ.rtn.xts.obj[is.na(univ.rtn.xts.obj)]<- na.replace
univ.rtn.xts.obj
}
# Create cumulative return function
cum.rtn <- function(clean.xts.obj, g = TRUE) {
x <- clean.xts.obj
if(g == TRUE){y <- cumprod(x+1)-1} else {y <- cumsum(x)}
y
}
# Create function to calculate drawdowns
dd.xts <- function(clean.xts.obj, g = TRUE) {
x <- clean.xts.obj
if(g == TRUE){y <- Drawdowns(x)} else {y <- Drawdowns(x,geometric = FALSE)}
#if(g == TRUE){y <- findDrawdowns(x)} else {y <- findDrawdowns(x,geometric = FALSE)}
y
}
# create a function to create a dataframe to be usable in ggplot to replicate charts.PerformanceSummary
cps.df <- function(xts.obj,geometric) {
x <- clean.rtn.xts(xts.obj)
series.name <- colnames(xts.obj)[1]
tmp <- cum.rtn(x,geometric)
tmp$rtn <- x
tmp$dd <- dd.xts(x,geometric)
colnames(tmp) <- c("Index","Return","Drawdown") # names with space
tmp.df <- as.data.frame(coredata(tmp))
tmp.df$Date <- as.POSIXct(index(tmp))
tmp.df.long <- melt(tmp.df,id.var="Date")
tmp.df.long$asset <- rep(series.name,nrow(tmp.df.long))
tmp.df.long
}
# A conditional statement altering the plot according to the number of assets
if(ncol(rtn.obj)==1) {
# using the cps.df function
df <- cps.df(rtn.obj,geometric)
# adding in a title string if need be
if(main == ""){
title.string <- paste("Asset Performance")
} else {
title.string <- main
}
gg.xts <- ggplot(df, aes_string( x = "Date", y = "value", group = "variable" )) +
facet_grid(variable ~ ., scales = "free_y", space = "fixed") +
geom_line(data = subset(df, variable == "Index")) +
geom_bar(data = subset(df, variable == "Return"), stat = "identity") +
geom_line(data = subset(df, variable == "Drawdown")) +
geom_hline(yintercept = 0, size = 0.5, colour = "black") +
ggtitle(title.string) +
theme(axis.text.x = element_text(angle = 0, hjust = 1)) +
scale_x_datetime(breaks = date_breaks("6 months"), labels = date_format("%m/%Y")) +
ylab("") +
xlab("")
} else {
# a few extra bits to deal with the added rtn columns
no.of.assets <- ncol(rtn.obj)
asset.names <- colnames(rtn.obj)
df <- do.call(rbind,lapply(1:no.of.assets, function(x){cps.df(rtn.obj[,x],geometric)}))
df$asset <- ordered(df$asset, levels=asset.names)
if(main == "") {
title.string <- paste("Asset",asset.names[1],asset.names[2],asset.names[3],"Performance")
} else {
title.string <- main
}
if(no.of.assets>5){legend.rows <- 5} else {legend.rows <- no.of.assets}
gg.xts <- ggplot(df, aes_string(x = "Date", y = "value" )) +
# panel layout
facet_grid(variable~., scales = "free_y", space = "fixed", shrink = TRUE, drop = TRUE, margin =
, labeller = label_value) + # label_value is default
# display points for Index and Drawdown, but not for Return
geom_point(data = subset(df, variable == c("Index","Drawdown"))
, aes(colour = factor(asset), shape = factor(asset)), size = 1.2, show_guide = TRUE) +
# manually select shape of geom_point
scale_shape_manual(values = c(1,2,3)) +
# line colours for the Index
geom_line(data = subset(df, variable == "Index"), aes(colour = factor(asset)), show_guide = FALSE) +
# bar colours for the Return
geom_bar(data = subset(df,variable == "Return"), stat = "identity"
, aes(fill = factor(asset), colour = factor(asset)), position = "dodge", show_guide = FALSE) +
# line colours for the Drawdown
geom_line(data = subset(df, variable == "Drawdown"), aes(colour = factor(asset)), show_guide = FALSE) +
# horizontal line to indicate zero values
geom_hline(yintercept = 0, size = 0.5, colour = "black") +
# horizontal ticks
scale_x_datetime(breaks = date_breaks("6 months"), labels = date_format("%m/%Y")) +
# main y-axis title
ylab("") +
# main x-axis title
xlab("") +
# main chart title
ggtitle(title.string)
# legend
gglegend <- guide_legend(override.aes = list(size = 3))
gg.xts <- gg.xts + guides(colour = gglegend, size = "none") +
# gglegend <- guide_legend(override.aes = list(size = 3), direction = "horizontal") # direction overwritten by legend.box?
# gg.xts <- gg.xts + guides(colour = gglegend, size = "none", shape = gglegend) + # Warning: "Duplicated override.aes is ignored"
theme( legend.title = element_blank()
, legend.position = c(0,1)
, legend.justification = c(0,1)
, legend.background = element_rect()
, legend.box = "horizontal" # not working?
, axis.text.x = element_text(angle = 0, hjust = 1)
)
}
assign("gg.xts", gg.xts,envir=.GlobalEnv)
if(plot == TRUE){
plot(gg.xts)
} else {}
}
gg.charts.PerformanceSummary(rtn.obj, geometric = TRUE)
gg.charts.PerformanceSummary <- function(rtn.obj, geometric = TRUE, main = "", plot = TRUE) {
# load libraries
suppressPackageStartupMessages(require(ggplot2))
suppressPackageStartupMessages(require(scales))
suppressPackageStartupMessages(require(reshape))
suppressPackageStartupMessages(require(PerformanceAnalytics))
# create function to clean returns if having NAs in data
clean.rtn.xts <- function(univ.rtn.xts.obj,na.replace=0){
univ.rtn.xts.obj[is.na(univ.rtn.xts.obj)]<- na.replace
univ.rtn.xts.obj
}
# Create cumulative return function
cum.rtn <- function(clean.xts.obj, g = TRUE) {
x <- clean.xts.obj
if(g == TRUE){y <- cumprod(x+1)-1} else {y <- cumsum(x)}
y
}
# Create function to calculate drawdowns
dd.xts <- function(clean.xts.obj, g = TRUE) {
x <- clean.xts.obj
#if(g == TRUE){y <- Drawdowns(x)} else {y <- Drawdowns(x,geometric = FALSE)}
if(g == TRUE){y <- findDrawdowns(x)} else {y <- findDrawdowns(x,geometric = FALSE)}
y
}
# create a function to create a dataframe to be usable in ggplot to replicate charts.PerformanceSummary
cps.df <- function(xts.obj,geometric) {
x <- clean.rtn.xts(xts.obj)
series.name <- colnames(xts.obj)[1]
tmp <- cum.rtn(x,geometric)
tmp$rtn <- x
tmp$dd <- dd.xts(x,geometric)
colnames(tmp) <- c("Index","Return","Drawdown") # names with space
tmp.df <- as.data.frame(coredata(tmp))
tmp.df$Date <- as.POSIXct(index(tmp))
tmp.df.long <- melt(tmp.df,id.var="Date")
tmp.df.long$asset <- rep(series.name,nrow(tmp.df.long))
tmp.df.long
}
# A conditional statement altering the plot according to the number of assets
#     if(ncol(rtn.obj)==1) {
#         # using the cps.df function
#         df <- cps.df(rtn.obj,geometric)
#         # adding in a title string if need be
#         if(main == ""){
#             title.string <- paste("Asset Performance")
#         } else {
#             title.string <- main
#         }
#
#         gg.xts <- ggplot(df, aes_string( x = "Date", y = "value", group = "variable" )) +
#             facet_grid(variable ~ ., scales = "free_y", space = "fixed") +
#             geom_line(data = subset(df, variable == "Index")) +
#             geom_bar(data = subset(df, variable == "Return"), stat = "identity") +
#             geom_line(data = subset(df, variable == "Drawdown")) +
#             geom_hline(yintercept = 0, size = 0.5, colour = "black") +
#             ggtitle(title.string) +
#             theme(axis.text.x = element_text(angle = 0, hjust = 1)) +
#             scale_x_datetime(breaks = date_breaks("6 months"), labels = date_format("%m/%Y")) +
#             ylab("") +
#             xlab("")
#
#     } else {
#
#         # a few extra bits to deal with the added rtn columns
#         no.of.assets <- ncol(rtn.obj)
#         asset.names <- colnames(rtn.obj)
#         df <- do.call(rbind,lapply(1:no.of.assets, function(x){cps.df(rtn.obj[,x],geometric)}))
#         df$asset <- ordered(df$asset, levels=asset.names)
#         if(main == "") {
#             title.string <- paste("Asset",asset.names[1],asset.names[2],asset.names[3],"Performance")
#         } else {
#             title.string <- main
#         }
#
#         if(no.of.assets>5){legend.rows <- 5} else {legend.rows <- no.of.assets}
#
#         gg.xts <- ggplot(df, aes_string(x = "Date", y = "value" )) +
#
#             # panel layout
#             facet_grid(variable~., scales = "free_y", space = "fixed", shrink = TRUE, drop = TRUE, margin =
#                            , labeller = label_value) + # label_value is default
#
#             # display points for Index and Drawdown, but not for Return
#             geom_point(data = subset(df, variable == c("Index","Drawdown"))
#                        , aes(colour = factor(asset), shape = factor(asset)), size = 1.2, show_guide = TRUE) +
#
#             # manually select shape of geom_point
#             scale_shape_manual(values = c(1,2,3)) +
#
#             # line colours for the Index
#             geom_line(data = subset(df, variable == "Index"), aes(colour = factor(asset)), show_guide = FALSE) +
#
#             # bar colours for the Return
#             geom_bar(data = subset(df,variable == "Return"), stat = "identity"
#                      , aes(fill = factor(asset), colour = factor(asset)), position = "dodge", show_guide = FALSE) +
#
#             # line colours for the Drawdown
#             geom_line(data = subset(df, variable == "Drawdown"), aes(colour = factor(asset)), show_guide = FALSE) +
#
#             # horizontal line to indicate zero values
#             geom_hline(yintercept = 0, size = 0.5, colour = "black") +
#
#             # horizontal ticks
#             scale_x_datetime(breaks = date_breaks("6 months"), labels = date_format("%m/%Y")) +
#
#             # main y-axis title
#             ylab("") +
#
#             # main x-axis title
#             xlab("") +
#
#             # main chart title
#             ggtitle(title.string)
#
#         # legend
#
#         gglegend <- guide_legend(override.aes = list(size = 3))
#
#         gg.xts <- gg.xts + guides(colour = gglegend, size = "none") +
#
#             # gglegend <- guide_legend(override.aes = list(size = 3), direction = "horizontal") # direction overwritten by legend.box?
#             # gg.xts <- gg.xts + guides(colour = gglegend, size = "none", shape = gglegend) + # Warning: "Duplicated override.aes is ignored"
#
#             theme( legend.title = element_blank()
#                    , legend.position = c(0,1)
#                    , legend.justification = c(0,1)
#                    , legend.background = element_rect()
#                    , legend.box = "horizontal" # not working?
#                    , axis.text.x = element_text(angle = 0, hjust = 1)
#             )
#
#     }
assign("gg.xts", gg.xts,envir=.GlobalEnv)
if(plot == TRUE){
plot(gg.xts)
} else {}
}
gg.charts.PerformanceSummary(rtn.obj, geometric = TRUE)
gg.charts.PerformanceSummary <- function(rtn.obj, geometric = TRUE, main = "", plot = TRUE) {
# load libraries
suppressPackageStartupMessages(require(ggplot2))
suppressPackageStartupMessages(require(scales))
suppressPackageStartupMessages(require(reshape))
suppressPackageStartupMessages(require(PerformanceAnalytics))
# create function to clean returns if having NAs in data
clean.rtn.xts <- function(univ.rtn.xts.obj,na.replace=0){
univ.rtn.xts.obj[is.na(univ.rtn.xts.obj)]<- na.replace
univ.rtn.xts.obj
}
# Create cumulative return function
cum.rtn <- function(clean.xts.obj, g = TRUE) {
x <- clean.xts.obj
if(g == TRUE){y <- cumprod(x+1)-1} else {y <- cumsum(x)}
y
}
# Create function to calculate drawdowns
dd.xts <- function(clean.xts.obj, g = TRUE) {
x <- clean.xts.obj
#if(g == TRUE){y <- Drawdowns(x)} else {y <- Drawdowns(x,geometric = FALSE)}
if(g == TRUE){y <- findDrawdowns(x)} else {y <- findDrawdowns(x,geometric = FALSE)}
y
}
# create a function to create a dataframe to be usable in ggplot to replicate charts.PerformanceSummary
cps.df <- function(xts.obj,geometric) {
x <- clean.rtn.xts(xts.obj)
series.name <- colnames(xts.obj)[1]
tmp <- cum.rtn(x,geometric)
tmp$rtn <- x
tmp$dd <- dd.xts(x,geometric)
colnames(tmp) <- c("Index","Return","Drawdown") # names with space
tmp.df <- as.data.frame(coredata(tmp))
tmp.df$Date <- as.POSIXct(index(tmp))
tmp.df.long <- melt(tmp.df,id.var="Date")
tmp.df.long$asset <- rep(series.name,nrow(tmp.df.long))
tmp.df.long
}
# A conditional statement altering the plot according to the number of assets
#     if(ncol(rtn.obj)==1) {
#         # using the cps.df function
#         df <- cps.df(rtn.obj,geometric)
#         # adding in a title string if need be
#         if(main == ""){
#             title.string <- paste("Asset Performance")
#         } else {
#             title.string <- main
#         }
#
#         gg.xts <- ggplot(df, aes_string( x = "Date", y = "value", group = "variable" )) +
#             facet_grid(variable ~ ., scales = "free_y", space = "fixed") +
#             geom_line(data = subset(df, variable == "Index")) +
#             geom_bar(data = subset(df, variable == "Return"), stat = "identity") +
#             geom_line(data = subset(df, variable == "Drawdown")) +
#             geom_hline(yintercept = 0, size = 0.5, colour = "black") +
#             ggtitle(title.string) +
#             theme(axis.text.x = element_text(angle = 0, hjust = 1)) +
#             scale_x_datetime(breaks = date_breaks("6 months"), labels = date_format("%m/%Y")) +
#             ylab("") +
#             xlab("")
#
#     } else {
#
#         # a few extra bits to deal with the added rtn columns
#         no.of.assets <- ncol(rtn.obj)
#         asset.names <- colnames(rtn.obj)
#         df <- do.call(rbind,lapply(1:no.of.assets, function(x){cps.df(rtn.obj[,x],geometric)}))
#         df$asset <- ordered(df$asset, levels=asset.names)
#         if(main == "") {
#             title.string <- paste("Asset",asset.names[1],asset.names[2],asset.names[3],"Performance")
#         } else {
#             title.string <- main
#         }
#
#         if(no.of.assets>5){legend.rows <- 5} else {legend.rows <- no.of.assets}
#
#         gg.xts <- ggplot(df, aes_string(x = "Date", y = "value" )) +
#
#             # panel layout
#             facet_grid(variable~., scales = "free_y", space = "fixed", shrink = TRUE, drop = TRUE, margin =
#                            , labeller = label_value) + # label_value is default
#
#             # display points for Index and Drawdown, but not for Return
#             geom_point(data = subset(df, variable == c("Index","Drawdown"))
#                        , aes(colour = factor(asset), shape = factor(asset)), size = 1.2, show_guide = TRUE) +
#
#             # manually select shape of geom_point
#             scale_shape_manual(values = c(1,2,3)) +
#
#             # line colours for the Index
#             geom_line(data = subset(df, variable == "Index"), aes(colour = factor(asset)), show_guide = FALSE) +
#
#             # bar colours for the Return
#             geom_bar(data = subset(df,variable == "Return"), stat = "identity"
#                      , aes(fill = factor(asset), colour = factor(asset)), position = "dodge", show_guide = FALSE) +
#
#             # line colours for the Drawdown
#             geom_line(data = subset(df, variable == "Drawdown"), aes(colour = factor(asset)), show_guide = FALSE) +
#
#             # horizontal line to indicate zero values
#             geom_hline(yintercept = 0, size = 0.5, colour = "black") +
#
#             # horizontal ticks
#             scale_x_datetime(breaks = date_breaks("6 months"), labels = date_format("%m/%Y")) +
#
#             # main y-axis title
#             ylab("") +
#
#             # main x-axis title
#             xlab("") +
#
#             # main chart title
#             ggtitle(title.string)
#
#         # legend
#
#         gglegend <- guide_legend(override.aes = list(size = 3))
#
#         gg.xts <- gg.xts + guides(colour = gglegend, size = "none") +
#
#             # gglegend <- guide_legend(override.aes = list(size = 3), direction = "horizontal") # direction overwritten by legend.box?
#             # gg.xts <- gg.xts + guides(colour = gglegend, size = "none", shape = gglegend) + # Warning: "Duplicated override.aes is ignored"
#
#             theme( legend.title = element_blank()
#                    , legend.position = c(0,1)
#                    , legend.justification = c(0,1)
#                    , legend.background = element_rect()
#                    , legend.box = "horizontal" # not working?
#                    , axis.text.x = element_text(angle = 0, hjust = 1)
#             )
#
#     }
#     assign("gg.xts", gg.xts,envir=.GlobalEnv)
#     if(plot == TRUE){
#         plot(gg.xts)
#     } else {}
}
gg.charts.PerformanceSummary(rtn.obj, geometric = TRUE)
View(rtn.obj)
View(tab)
View(tab)
View(rtn.obj)
source("c:/r/qServer.R")
Sys.setenv(TZ="GMT")
# load q server
source("c:/r/qServer.R")
Sys.setenv(TZ="GMT")
# milisec
options(digits.secs=3)
h     <- open_connection(hostip,5015,":")
# Open connection
hostip <- "192.168.10.212"
h     <- open_connection(hostip,5015,":")
query <- "select `int$trend from tab2rb"
res <- execute(h, query)
View(res)
hist(res)
hist(res$trend)
summary(res$trend)
detach("package:ggplot2", unload=TRUE)
library("ggplot2", lib.loc="~/R/win-library/3.1")
require(ggplot2)
require(scales)
require(reshape)
require(reshape2)
library("reshape2", lib.loc="~/R/win-library/3.1")
install.packages("reshape2")
require(reshape)
require(reshape2)
library("reshape", lib.loc="~/R/win-library/3.1")
detach("package:reshape", unload=TRUE)
library("reshape2", lib.loc="~/R/win-library/3.1")
detach("package:reshape2", unload=TRUE)
require(reshape2)
require(ggplot2)
require(scales)
gg <- ggplot(res, aes(x=trend)) + geom_histogram()
gg
gg <- ggplot(res, aes(x=trend)) + geom_histogram(alpha = 0.5)
gg
summary(res$trend)
sd(res$trend)
rnorm(100, mean = 0, sd = 5.885532)
gg <- ggplot(res, aes(x=trend, y = ..density..)) + geom_histogram(alpha = 0.5)
gg
gg <- ggplot(res, aes(x=trend, y = ..density..)) + geom_histogram(alpha = 0.5) + geom_density(alpha = 0)
gg
gg <- ggplot(res, aes(x=trend, y = ..density..)) + geom_histogram(alpha = 0.5) + geom_density(alpha = 0)
gg
res$rw <- rnorm(1000, mean = 0, sd = 5.885532)
res$rw <- rnorm(133008, mean = 0, sd = 5.885532)
res$rw
df <- mean(res)
df
res
View(res)
res
Object(res)
toString(res)
data <- data.frame(
CDS = rnorm(1000, 20, 5),
exons = rnorm(1000, 25, 6),
introns = rnorm(1000, 45, 6)
)
df <- melt(data)
View(data)
View(df)
as.numeric(res$trend)
res$trend <- as.numeric(res$trend)
View(res)
View(res)
df <- mean(res)
df <- melt(res)
View(df)
View(df)
View(df)
gg <- ggplot(res, aes(x=value, y = ..density.., fill = variable)) + geom_histogram(alpha = 0.5) + geom_density(alpha = 0)
gg
gg <- ggplot(df, aes(x=value, y = ..density.., fill = variable)) + geom_histogram(alpha = 0.5) + geom_density(alpha = 0)
gg <- ggplot(df, aes(x=value, y = ..density.., fill = variable, colour = variable)) + geom_histogram(alpha = 0.5) + geom_density(alpha = 0)
gg <- ggplot(df, aes(x=value, y = ..density.., fill = variable, colour = variable))
+ geom_histogram(alpha = 0.5, position = "identity" ) + geom_density(alpha = 0)
gg
gg <- ggplot(df, aes(x=value, y = ..density.., fill = variable, colour = variable)) + geom_histogram(alpha = 0.5, position = "identity") + geom_density(alpha = 0)
gg
density
source("c:/r/qServer.R")
Sys.setenv(TZ="GMT")
# milisec
options(digits.secs=3)
# Open connection
hostip <- "192.168.10.212"
h     <- open_connection(hostip,5015,":")
# lib
require(ggplot2)
require(scales)
require(reshape)
require(reshape2)
require(reshape2)
require(scales)
require(ggplot2)
require(reshape)
require(reshape2)
install.packages("reshape2")
require(reshape2)
install.packages("ggplot2")
