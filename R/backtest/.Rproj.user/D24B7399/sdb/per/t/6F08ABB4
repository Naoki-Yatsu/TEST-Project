{
    "contents" : "# http://obaq.soup.io/tag/R\n#\n# Modest Modeest for Moving Average\n#\nrequire(modeest)\nrequire(quantmod)\nrequire(PerformanceAnalytics)\n\ngetSymbols(\"^GSPC\",from=\"1896-01-01\",to=Sys.Date())\nGSPC.monthly <- to.monthly(GSPC)[,4]\nindex(GSPC.monthly) <- as.Date(index(GSPC.monthly))   #width will represent number of months for mode\nwidth = 10\nfor (i in width:NROW(GSPC.monthly)) {\n  #not real proud of this code\n  #please feel free to comment with improvements\n  m.default <- mlv(GSPC.monthly[(i-width):i])\n  m.lientz <- mlv(GSPC.monthly[(i-width):i], method = \"lientz\", bw=0.01)\n  m.hrm <- mlv(GSPC.monthly[(i-width):i], method = \"hrm\", bw=0.01)\n  m.hsm <- mlv(GSPC.monthly[(i-width):i], method = \"hsm\",tie.action = \"mean\")\n  m.grenander <- mlv(GSPC.monthly[(i-width):i], method = \"grenander\", p = 0.5)\n  m.parzen <- mlv(GSPC.monthly[(i-width):i], method = \"parzen\", kernel = \"gaussian\")\n  m.tsybakov <- mlv(GSPC.monthly[(i-width):i], method = \"tsybakov\")\n  m.asselin <- mlv(GSPC.monthly[(i-width):i], method = \"asselin\")\n  m.vieu <- mlv(GSPC.monthly[(i-width):i], method = \"vieu\")\n  m.all <- c(as.numeric(m.default[1]), as.numeric(m.lientz[1]),\n    as.numeric(m.hrm[1]), as.numeric(m.hsm[1]), as.numeric(m.grenander[1]),\n    as.numeric(m.parzen[1]), as.numeric(m.tsybakov[1]),\n    as.numeric(m.asselin[1]), as.numeric(m.vieu[1]))\n  ifelse(i==width, m.hist <- m.all, m.hist <- rbind(m.hist,m.all))\n}\nm.xts <- as.xts(as.data.frame(m.hist),order.by=index(GSPC.monthly[(width):NROW(GSPC.monthly),]))\nm.xts <- merge(m.xts,runMean(GSPC.monthly,n=10),runMedian(GSPC.monthly,n=10))\ncolnames(m.xts) <- c(\"default\",\"lientz\",\"hrm\",\"hsm\",\"grenander\",\"parzen\",\"tsybakov\",\"asselin\",\"vieu\",\"mean\",\"median\")\nGSPC.mode <- merge(GSPC.monthly,m.xts)   #there has to be a much cleaner way to accomplish this\nsignal <- GSPC.mode[,2:NCOL(GSPC.mode)]\nret <- GSPC.mode[,2:NCOL(GSPC.mode)]\nfor (i in 1:NCOL(signal)) {\n  signal[,i] <- ifelse(GSPC.mode[,1] > GSPC.mode[,i+1],1,0)\n  ret[,i] <- lag(signal[,i],k=1) * ROC(GSPC.mode[,1],type=\"discrete\",n=1)\n}\nret <- merge(ret,ROC(GSPC.mode[,1],type=\"discrete\",n=1))\n#jpeg(filename=\"modeest performance summary.jpg\",\n#\tquality=100,width=6.25, height = 6.25,  units=\"in\",res=96)\ncharts.PerformanceSummary(ret,ylog=TRUE,lwd=c(rep(2,9),rep(4,3)),main=\"Modeest System Comparison with Mean and Median\")\ncharts.PerformanceSummary(ret,ylog=TRUE)\n\n#dev.off()   t(table.AnnualizedReturns(ret))   #jpeg(filename=\"modeest risk return.jpg\",\n#\tquality=100,width=6.25, height = 6.25,  units=\"in\",res=96)\nchart.RiskReturnScatter(ret)\n#dev.off()\n\n\n# ========================================================\n#    charts.PerformanceSummary colours\n# ========================================================\n# http://stackoverflow.com/questions/21536489/charts-performancesummary-colours\n\nlibrary(PerformanceAnalytics)\nn <- 12\nd <- 1000\nv <- xts(matrix(rnorm(n*d,0.0001,0.003),ncol=n),Sys.Date()-c(1:d))\ncolnames(v) <- LETTERS[1:n]\ncharts.PerformanceSummary(v,col=rainbow12equal)\n# Error in plot.xy(xy.coords(x, y), type = type, ...) : formal argument \"col\" matched by multiple actual arguments\n\n# ooks like you should set colorset not col:\ncharts.PerformanceSummary(v,colorset=rainbow12equal)\n\n\n\n",
    "created" : 1410582179301.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "4273331784",
    "id" : "6F08ABB4",
    "lastKnownWriteTime" : 1410583599,
    "path" : "J:/git/algorithm-trading-system/algorithm-trading-system/R/backtest/sample_PerformanceSummary.R",
    "project_path" : "sample_PerformanceSummary.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "source_on_save" : false,
    "type" : "r_source"
}