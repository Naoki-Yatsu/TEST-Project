recordPlot
render('report/ats_backtest_report.Rmd', 'knitrBootstrap::bootstrap_document')
symbols <- execute(h, "exec sym from select distinct sym from MarketOrder")
symbols <- execute(h, "exec sym from select distinct sym from MarketOrder")
#
# ATS backtest report
#
# library
library("ggplot2")
library("reshape2")
library("grid")
library("scales")
library("quantmod")
library("knitrBootstrap")
library("rmarkdown")
library(rCharts)
# load q server
source("c:/r/qServer.R")
Sys.setenv(TZ="GMT")
options(digits.secs=3)
# Open connection
hostip <- "192.168.10.212"
port <- 5212
# Open
h <- open_connection(host = hostip, port = port)
execute(h, "tables[]")
symbols <- execute(h, "exec sym from select distinct sym from MarketOrder")
for (symbol in symbols) {
symbol <- paste(" (", symbol, ")", sep = "")
symbol
}
symbols
for (symbol in symbols) {
symbol <- paste(" (", symbol, ")", sep = "")
print(symbol)
}
res.ohlc <- res[,1:5]
res.ohlc$candleLower <- pmin(res.ohlc$open, res.ohlc$close)
res.ohlc$candleMiddle <- NA
res.ohlc$candleUpper <- pmax(res.ohlc$open, res.ohlc$close)
res.ohlc$fill <- res.ohlc$open > res.ohlc$close
gg <- ggplot(res.ohlc, aes(x=date, lower=candleLower, middle=candleMiddle, upper=candleUpper, ymin=low, ymax=high))
gg <- gg + geom_boxplot(stat='identity', aes(group=date, fill=fill)) + scale_fill_manual(values = c("#00CC00", "#CC0000"), guide = FALSE)
gg <- gg + theme(axis.title.x = element_blank(), axis.title.y = element_blank())
gg <- gg + scale_x_datetime(labels=date_format("%Y-%m")) + scale_y_continuous(label=comma)
gg <- gg + annotate("text", x=min(res.ohlc$date), y=Inf, label = "Price", hjust=0, vjust=1.5, size=10)
gg
res <- execute(h, ".ats.dailyPLOHLC_R[dates; psym; 0b]")
res$date <- as.POSIXct(res$date)
res.ohlc <- res[,1:5]
res.ohlc$candleLower <- pmin(res.ohlc$open, res.ohlc$close)
res.ohlc$candleMiddle <- NA
res.ohlc$candleUpper <- pmax(res.ohlc$open, res.ohlc$close)
res.ohlc$fill <- res.ohlc$open > res.ohlc$close
gg <- ggplot(res.ohlc, aes(x=date, lower=candleLower, middle=candleMiddle, upper=candleUpper, ymin=low, ymax=high))
gg <- gg + geom_boxplot(stat='identity', aes(group=date, fill=fill)) + scale_fill_manual(values = c("#00CC00", "#CC0000"), guide = FALSE)
gg <- gg + theme(axis.title.x = element_blank(), axis.title.y = element_blank())
gg <- gg + scale_x_datetime(labels=date_format("%Y-%m")) + scale_y_continuous(label=comma)
gg <- gg + annotate("text", x=min(res.ohlc$date), y=Inf, label = "Price", hjust=0, vjust=1.5, size=10)
gg
iris
library( kernlab )
library( kernlab )
random_ids<-sample(rowdata,rowdata*0.5)
random_ids<-sample(rowdata,rowdata*0.5)
rowdata<-nrow(iris)
random_ids<-sample(rowdata,rowdata*0.5)
random_ids
random_idsiris_training<-iris[random_ids, ]
iris_training<-iris[random_ids, ]
iris_training
iris_predicting<-iris[-random_ids, ]
iris_predicting
iris_svm<-ksvm(Species ~., data=iris_training )
iris_svm
iris_training
ksvm
result_predict<-predict(iris_svm, iris_predicting)
result_predict
table(result_predict,iris_predicting$Species)
iris_svm
table(result_predict,iris_predicting$Species)
iris_predicting
table(result_predict,iris_predicting$Species)
# library
library("ggplot2")
library("reshape2")
library("grid")
library("scales")
library("quantmod")
library("knitrBootstrap")
library("rmarkdown")
library(rCharts)
# load q server
source("c:/r/qServer.R")
Sys.setenv(TZ="GMT")
options(digits.secs=3)
# Open connection
hostip <- "192.168.10.212"
port <- 5212
# Open
h <- open_connection(host = hostip, port = port)
execute(h, "tables[]")
symbols <- execute(h, "exec sym from select distinct sym from MarketOrder")
paste0("a", "b")
paste0
res <- execute(h, ".ats.dailyPLOHLC_R[dates; psym; 0b]")
res$date <- as.POSIXct(res$date)
res.ohlc <- res[,1:5]
res.ohlc$candleLower <- pmin(res.ohlc$open, res.ohlc$close)
res.ohlc$candleMiddle <- NA
res.ohlc$candleUpper <- pmax(res.ohlc$open, res.ohlc$close)
res.ohlc$fill <- res.ohlc$open > res.ohlc$close
gg <- ggplot(res.ohlc, aes(x=date, lower=candleLower, middle=candleMiddle, upper=candleUpper, ymin=low, ymax=high))
gg <- gg + geom_boxplot(stat='identity', aes(group=date, fill=fill)) + scale_fill_manual(values = c("#00CC00", "#CC0000"), guide = FALSE)
gg <- gg + theme(axis.title.x = element_blank(), axis.title.y = element_blank())
gg <- gg + scale_x_datetime(labels=date_format("%Y-%m")) + scale_y_continuous(label=comma)
gg <- gg + annotate("text", x=min(res.ohlc$date), y=Inf, label = "Price", hjust=0, vjust=1.5, size=10)
gg <- gg + ggtitle("USDJPY")
gg
modelCol <- ncol(res) - 1
res.model <- res[,c(1,6:modelCol)]
res.model <- melt(res.model, id.vars = "date", variable.name = "model", value.name = "PL")
gg <- ggplot(res.model, aes(x=date, y=PL, colour=model)) + geom_line()
gg <- gg + theme(axis.title.x = element_blank(), axis.title.y = element_blank()) + geom_hline(yintercept=0)
gg <- gg + theme(legend.position=c(0,0), legend.justification=c(0,0))
gg <- gg + scale_x_datetime(labels=date_format("%Y-%m")) + scale_y_continuous(label=comma)
gg <- gg + annotate("text", x=min(res.model$date), y=Inf, label = "PL", hjust=0, vjust=1.5, size=10)
gg
res.position <- res[,c(1,ncol(res))]
gg <- ggplot(res.position, aes(x=date, y=position)) + geom_line(colour="blue")
gg <- gg + theme(axis.title.x = element_blank(), axis.title.y = element_blank()) + geom_hline(yintercept=0)
gg <- gg + scale_x_datetime(labels=date_format("%Y-%m")) + scale_y_continuous(label=comma)
gg <- gg + annotate("text", x=min(res.position$date), y=Inf, label = "Position", hjust=0, vjust=1.5, size=10)
gg
res.ohlc <- res[,1:5]
res.ohlc$candleLower <- pmin(res.ohlc$open, res.ohlc$close)
res.ohlc$candleMiddle <- NA
res.ohlc$candleUpper <- pmax(res.ohlc$open, res.ohlc$close)
res.ohlc$fill <- res.ohlc$open > res.ohlc$close
gg <- ggplot(res.ohlc, aes(x=date, lower=candleLower, middle=candleMiddle, upper=candleUpper, ymin=low, ymax=high))
gg <- gg + geom_boxplot(stat='identity', aes(group=date, fill=fill)) + scale_fill_manual(values = c("#00CC00", "#CC0000"), guide = FALSE)
gg <- gg + theme(axis.title.x = element_blank(), axis.title.y = element_blank())
gg <- gg + scale_x_datetime(labels=date_format("%Y-%m")) + scale_y_continuous(label=comma)
gg <- gg + annotate("text", x=min(res.ohlc$date), y=Inf, label = "Price", hjust=0, vjust=1.5, size=10)
gg <- gg + ggtitle("USDJPY")
gg
gg <- gg + ggtitle("USDJPY") + theme(plot.title=element_text(size=10))
gg
gg <- gg + ggtitle("USDJPY") + theme(plot.title=element_text(size=rel(2)))
gg
gg <- gg + ggtitle("USDJPY") + theme(plot.title=element_text(size=rel(2), face="bold"))
gg
render('report/ats_backtest_report.Rmd', 'knitrBootstrap::bootstrap_document')
render('report/ats_backtest_report.Rmd', 'knitrBootstrap::bootstrap_document')
res <- execute(h, ".ats.PLandDD_R[dates]")
#
# ATS backtest report
#
# library
library("ggplot2")
library("reshape2")
library("grid")
library("scales")
library("quantmod")
library("knitrBootstrap")
library("rmarkdown")
library(rCharts)
# load q server
source("c:/r/qServer.R")
Sys.setenv(TZ="GMT")
options(digits.secs=3)
# Open connection
hostip <- "192.168.10.212"
port <- 5212
# Open
h <- open_connection(host = hostip, port = port)
execute(h, "tables[]")
res <- execute(h, ".ats.PLandDD_R[dates]")
res <- execute(h, ".ats.PLandDD_R[dates]")
res
res.pl <- res[,1:2]
res.pl
install.packages(c("curl", "devtools", "jsonlite", "mime", "R6", "Rcpp", "rmarkdown", "scales", "xml2"))
install.packages(c("curl", "devtools", "jsonlite", "mime", "R6",
install.packages(c("curl", "devtools", "jsonlite", "mime", "R6", "Rcpp", "rmarkdown", "scales", "xml2"))
install.packages(c("curl", "devtools", "jsonlite", "mime", "R6",
install.packages(c("curl", "devtools", "jsonlite", "mime", "R6", "Rcpp", "rmarkdown", "scales", "xml2"))
install.packages(c("curl", "devtools", "jsonlite", "mime", "R6",
)
install.packages(c("curl", "devtools"))
install.packages(c("jsonlite", "mime", "Rcpp", "rmarkdown", "scales", "xml2"))
install.packages(c("jsonlite", "mime", "Rcpp", "rmarkdown", "scales",
install.packages(c("jsonlite", "mime", "rmarkdown"))
install.packages(c("scales", "xml2"))
install.packages("R6")
install.packages("Rcpp")
install.packages("Rcpp")
install.packages("Rcpp")
install.packages("Rcpp")
install.packages("devtools")
library(devtools)
install_github('ramnathv/rCharts')
#
# ATS backtest report
#
# library
library("ggplot2")
library("reshape2")
library("grid")
library("scales")
library("quantmod")
library("knitrBootstrap")
library("rmarkdown")
library(rCharts)
# load q server
source("c:/r/qServer.R")
Sys.setenv(TZ="GMT")
options(digits.secs=3)
# Open connection
hostip <- "192.168.10.212"
port <- 5212
# Open
h <- open_connection(host = hostip, port = port)
execute(h, "tables[]")
res <- execute(h, ".ats.PLandDD_R[dates]")
gg <- ggplot(res, aes(x=timestamp, y=total)) + geom_line(aes(y=PL))
gg
gg <- ggplot(res.pl, aes(x=date)) + geom_line(aes(y=PL), colour="blue")
res <- execute(h, ".ats.PLandDD_R[dates]")
res.pl <- res[,1:3]
gg <- ggplot(res.pl, aes(x=date)) + geom_line(aes(y=PL), colour="blue")
gg
res.pl
gg <- ggplot(res.pl, aes(x=date)) + geom_line(aes(y=PL), colour="blue") + geom_line(aes(y=PLmax), colour="blue")
gg
gg <- ggplot(res.pl, aes(x=date)) + geom_line(aes(y=PL), colour="red") + geom_line(aes(y=PLmax), colour="blue")
gg
gg <- ggplot(res.pl, aes(x=date)) + geom_line(aes(y=PL), colour="red") + geom_line(aes(y=PLmax), colour="blue")
gg <- gg + theme(axis.title.x = element_blank(), axis.title.y = element_blank()) + geom_hline(yintercept=0)
gg <- gg + scale_x_datetime(labels=date_format("%Y-%m")) + scale_y_continuous(label=comma)
gg
res$date <- as.factor(res$date)
res.pl <- res[,1:3]
gg <- ggplot(res.pl, aes(x=date)) + geom_line(colour="blue")
gg <- ggplot(res.pl, aes(x=date)) + geom_line(aes(y=PL), colour="red") + geom_line(aes(y=PLmax), colour="blue")
gg <- gg + theme(axis.title.x = element_blank(), axis.title.y = element_blank()) + geom_hline(yintercept=0)
gg <- gg + scale_x_datetime(labels=date_format("%Y-%m")) + scale_y_continuous(label=comma)
gg
res.pl <- res[,1:3]
res
source('J:/git/Analysis/R/backtest/report/ats_backtest.R', encoding = 'UTF-8')
res <- execute(h, ".ats.PLandDD_R[dates]")
res$date <- as.POSIXct(res$date)
res.pl <- res[,1:3]
gg <- ggplot(res.pl, aes(x=date)) + geom_line(aes(y=PL), colour="red") + geom_line(aes(y=PLmax), colour="blue")
gg <- gg + theme(axis.title.x = element_blank(), axis.title.y = element_blank()) + geom_hline(yintercept=0)
gg <- gg + scale_x_datetime(labels=date_format("%Y-%m")) + scale_y_continuous(label=comma)
gg
gg <- gg + theme(axis.title.x = element_blank(), axis.title.y = element_blank()) + geom_hline(yintercept=0)
gg <- ggplot(res.pl, aes(x=date)) + geom_line(aes(y=PL), colour="red", size=1.5) + geom_line(aes(y=PLmax), colour="blue")
gg <- gg + theme(axis.title.x = element_blank(), axis.title.y = element_blank()) + geom_hline(yintercept=0)
gg <- gg + scale_x_datetime(labels=date_format("%Y-%m")) + scale_y_continuous(label=comma)
gg
gg <- ggplot(res.pl, aes(x=date)) + geom_line(aes(y=PL), colour="red", size=1.2) + geom_line(aes(y=PLmax), colour="blue")
gg <- gg + theme(axis.title.x = element_blank(), axis.title.y = element_blank()) + geom_hline(yintercept=0)
gg <- gg + scale_x_datetime(labels=date_format("%Y-%m")) + scale_y_continuous(label=comma)
gg
gg <- ggplot(res.pl, aes(x=date)) + geom_line(aes(y=PL), colour="red", size=1) + geom_line(aes(y=PLmax), colour="blue")
gg <- gg + theme(axis.title.x = element_blank(), axis.title.y = element_blank()) + geom_hline(yintercept=0)
gg <- gg + scale_x_datetime(labels=date_format("%Y-%m")) + scale_y_continuous(label=comma)
gg
gg <- ggplot(res.pl, aes(x=date)) + geom_line(aes(y=PL), colour="red", size=0) + geom_line(aes(y=PLmax), colour="blue")
gg <- gg + theme(axis.title.x = element_blank(), axis.title.y = element_blank()) + geom_hline(yintercept=0)
gg <- gg + scale_x_datetime(labels=date_format("%Y-%m")) + scale_y_continuous(label=comma)
gg
gg <- ggplot(res.pl, aes(x=date)) + geom_line(aes(y=PL), colour="red", size=1) + geom_line(aes(y=PLmax), colour="blue")
gg <- gg + theme(axis.title.x = element_blank(), axis.title.y = element_blank()) + geom_hline(yintercept=0)
gg <- gg + scale_x_datetime(labels=date_format("%Y-%m")) + scale_y_continuous(label=comma)
gg
gg <- ggplot(res.pl, aes(x=date)) + geom_line(aes(y=PL), colour="red", size=1) + geom_line(aes(y=PLmax), colour="blue")
gg <- gg + theme(axis.title.x = element_blank(), axis.title.y = element_blank()) + geom_hline(yintercept=0)
gg <- gg + scale_x_datetime(labels=date_format("%Y-%m")) + scale_y_continuous(label=comma)
gg <- gg + annotate("text", x=min(res.pl$date), y=Inf, label = "PL (ALL)", hjust=0, vjust=1.5, size=10)
gg
theme_set(theme_bw())
gg <- ggplot(res.pl, aes(x=date)) + geom_line(aes(y=PL), colour="red", size=1) + geom_line(aes(y=PLmax), colour="blue")
gg <- gg + theme(axis.title.x = element_blank(), axis.title.y = element_blank()) + geom_hline(yintercept=0)
gg <- gg + scale_x_datetime(labels=date_format("%Y-%m")) + scale_y_continuous(label=comma)
gg <- gg + annotate("text", x=min(res.pl$date), y=Inf, label = "PL (ALL)", hjust=0, vjust=1.5, size=10)
gg
res.dd <- res[,c(1,4)]
gg <- ggplot(res.dd, aes(x=date, y=drawdown)) + geom_line(colour="gray")
gg <- gg + theme(axis.title.x = element_blank(), axis.title.y = element_blank()) + geom_hline(yintercept=0)
gg <- gg + scale_x_datetime(labels=date_format("%Y-%m")) + scale_y_continuous(label=comma)
gg <- gg + annotate("text", x=min(res.pl$date), y=Inf, label = "PL (ALL)", hjust=0, vjust=1.5, size=10)
gg
gg <- ggplot(res.dd, aes(x=date, y=drawdown)) + geom_line(colour="gray")
gg <- ggplot(res.dd, aes(x=date, y=drawdown)) + geom_line(colour="gray")
gg <- gg + theme(axis.title.x = element_blank(), axis.title.y = element_blank()) + geom_hline(yintercept=0)
gg <- gg + scale_x_datetime(labels=date_format("%Y-%m")) + scale_y_continuous(label=comma)
gg <- gg + annotate("text", x=min(res.pl$date), y=Inf, label = "Drawdown", hjust=0, vjust=1.5, size=10)
gg
source('J:/git/Analysis/R/backtest/report/ats_backtest.R', encoding = 'UTF-8')
grid.newpage()
pushViewport(viewport(layout = grid.layout(3, 1)))
res.pl <- res[,1:3]
gg <- ggplot(res.pl, aes(x=date)) + geom_line(aes(y=PL), colour="red", size=1) + geom_line(aes(y=PLmax), colour="blue")
gg <- gg + theme(axis.title.x = element_blank(), axis.title.y = element_blank()) + geom_hline(yintercept=0)
gg <- gg + scale_x_datetime(labels=date_format("%Y-%m")) + scale_y_continuous(label=comma)
gg <- gg + annotate("text", x=min(res.pl$date), y=Inf, label = "PL (ALL)", hjust=0, vjust=1.5, size=10)
gg <- gg + ggtitle("PL Summary") + theme(plot.title=element_text(size=rel(2), face="bold"))
print(gg, vp=viewport(layout.pos.row=1:2, layout.pos.col=1))
res.pl <- res[,1:3]
gg <- ggplot(res.pl, aes(x=date)) + geom_line(aes(y=PL), colour="red", size=1) + geom_line(aes(y=PLmax), colour="blue")
gg <- gg + theme(axis.title.x = element_blank(), axis.title.y = element_blank()) + geom_hline(yintercept=0)
gg <- gg + scale_x_datetime(labels=date_format("%Y-%m")) + scale_y_continuous(label=comma)
gg <- gg + annotate("text", x=min(res.pl$date), y=Inf, label = "PL (ALL)", hjust=0, vjust=1.5, size=10)
gg <- ggplot(res.pl, aes(x=date)) + geom_line(aes(y=PL), colour="red", size=1) + geom_line(aes(y=PLmax), colour="blue")
gg <- gg + theme(axis.title.x = element_blank(), axis.title.y = element_blank()) + geom_hline(yintercept=0)
gg <- gg + scale_x_datetime(labels=date_format("%Y-%m")) + scale_y_continuous(label=comma)
gg <- gg + annotate("text", x=min(res.pl$date), y=Inf, label = "PL (ALL)", hjust=0, vjust=1.5, size=10)
min(res.pl$date)
res.pl
res <- execute(h, ".ats.PLandDD_R[dates]")
res$date <- as.POSIXct(res$date)
# PL (ALL)
res.pl <- res[,1:3]
gg <- ggplot(res.pl, aes(x=date)) + geom_line(aes(y=PL), colour="red", size=1) + geom_line(aes(y=PLmax), colour="blue")
gg <- gg + theme(axis.title.x = element_blank(), axis.title.y = element_blank()) + geom_hline(yintercept=0)
gg <- gg + scale_x_datetime(labels=date_format("%Y-%m")) + scale_y_continuous(label=comma)
gg <- gg + annotate("text", x=min(res.pl$date), y=Inf, label = "PL (ALL)", hjust=0, vjust=1.5, size=10)
gg <- gg + ggtitle("PL Summary") + theme(plot.title=element_text(size=rel(2), face="bold"))
print(gg, vp=viewport(layout.pos.row=1:2, layout.pos.col=1))
# Drawdown
res.dd <- res[,c(1,4)]
gg <- ggplot(res.dd, aes(x=date, y=drawdown)) + geom_line(colour="gray")
gg <- gg + theme(axis.title.x = element_blank(), axis.title.y = element_blank()) + geom_hline(yintercept=0)
gg <- gg + scale_x_datetime(labels=date_format("%Y-%m")) + scale_y_continuous(label=comma)
gg <- gg + annotate("text", x=min(res.pl$date), y=Inf, label = "Drawdown", hjust=0, vjust=1.5, size=10)
print(gg, vp=viewport(layout.pos.row=3, layout.pos.col=1))
pushViewport
render('report/ats_backtest_report.Rmd', 'knitrBootstrap::bootstrap_document')
render('report/ats_backtest_report.Rmd', 'knitrBootstrap::bootstrap_document')
render('report/ats_backtest_report.Rmd', 'knitrBootstrap::bootstrap_document')
condition <- readLines("J:/git/algorithm-trading-system/algorithm-trading-system/logs/historical_test_info.txt")
for (line in condition) {
print(line)
}
condition <- read.table("J:/git/algorithm-trading-system/algorithm-trading-system/logs/historical_test_info.txt")
condition
condition <- read.delim("J:/git/algorithm-trading-system/algorithm-trading-system/logs/historical_test_info.txt")
condition
View(condition)
condition <- read.delim("J:/git/algorithm-trading-system/algorithm-trading-system/logs/historical_test_info.txt", header = FALSE)
View(condition)
condition$labels
condition$label
View(condition)
condition$labels <- c("aa", "bb")
condition$label <- c("aa", "bb")
condition$names
condition$names <- c("aa", "bb")
colnames(condition) <- c("key", "value")
condition
render('report/ats_backtest_report.Rmd', 'knitrBootstrap::bootstrap_document')
render('report/ats_backtest_report.Rmd', 'knitrBootstrap::bootstrap_document')
render('report/ats_backtest_report.Rmd', 'knitrBootstrap::bootstrap_document')
render('report/ats_backtest_report.Rmd', 'knitrBootstrap::bootstrap_document')
res <- execute(h, ".ats.performanceSummary[dates]")
#
# ATS backtest report
#
# library
library("ggplot2")
library("reshape2")
library("grid")
library("scales")
library("quantmod")
library("knitrBootstrap")
library("rmarkdown")
library(rCharts)
# load q server
source("c:/r/qServer.R")
Sys.setenv(TZ="GMT")
options(digits.secs=3)
# Open connection
hostip <- "192.168.10.212"
port <- 5212
# Open
h <- open_connection(host = hostip, port = port)
execute(h, "tables[]")
res <- execute(h, ".ats.performanceSummary[dates]")
res
tab <- xtable(res)
tab
print(tab)
kable(res)
kable(res)
kable(res, escape = "NaN")
round(15.4, digits = 0)
round(15.41, digits = 1)
is.nan(NaN)
is.nan(1/0)
1/0
is.nan(res[1,2])
res[1,2]
is.nan(res[1,3])
res[1,3]
res[1,]
values <- res[1,]
values <- res[1,]
for (v in values) {
print(v)
}
! TRUE
for (v in values) {
if (! is.nan(v)) {
print(v)
}
}
for (v in values) {
if (! is.nan(v)) {
print(v)
}
}
library(htmlTable)
install.packages("htmlTable")
library(htmlTable)
paste(c("1st", "2nd",
"3rd", "4th"), "header")
matrix(paste("Content", LETTERS[1:16]), ncol=4, byrow = TRUE)
output <- matrix(paste("Content", LETTERS[1:16]), ncol=4, byrow = TRUE)
htmlTable(output,
header =  paste(c("1st", "2nd",
"3rd", "4th"), "header"),
rnames = paste(c("1st", "2nd",
"3rd", "4th"), "row"),
rgroup = c("Group A",
"Group B"),
n.rgroup = c(2,2),
cgroup = c("Cgroup 1", "Cgroup 2&dagger;"),
n.cgroup = c(2,2),
caption="Basic table with both column spanners (groups) and row groups",
tfoot="&dagger; A table footer commment")
htmlTable(output,
header =  paste(c("1st", "2nd",
"3rd", "4th"), "header"),
rnames = paste(c("1st", "2nd",
"3rd", "4th"), "row"),
rgroup = c("Group A",
"Group B"),
n.rgroup = c(2,2),
cgroup = c("Cgroup 1", "Cgroup 2&dagger;"),
n.cgroup = c(2,2))
htmlTable(output,
rnames = paste(c("1st", "2nd", "3rd", "4th"), "row"),
rgroup = c("Group A", "Group B"),
n.rgroup = c(2,2))
c(2,2)
htmlTable(output,
rgroup = c("Group A", "Group B"),
n.rgroup = c(2,2))
htmlTable(output)
htmlTable
tableCreator.addRow <- function(values) {
print(values)
}
values
tableCreator.addRow(values)
class(values)
as.list(values)
cat("AA")
print("AA")
cat("\t<tr>")
cat("\t</tr>")
cat("</tr>\n")
paste0("<td>", item, "</td>")
tableCreator.addRow <- function(items) {
cat("\t<tr>")
for (item in items) {
cat(paste0("<td>", item, "</td>"))
}
cat("</tr>\n")
}
tableCreator.addRow(values)
res[2]
res[2,]
res[3,]
round(res[3,], digits = 1)
res[3,]
round(as.list(res[3,]), digits = 1)
as.list(res[3,])
as.matrix(res)
aaa <- as.matrix(res)
aaa
rownames(res)
rownames(res)
res[,1]
rownames(res) <- res[,1]
rownames(res)
res[,-1]
res <- res[,-1]
kable
kable(res)
xtable(res)
render('report/ats_backtest_report.Rmd', 'knitrBootstrap::bootstrap_document')
htmlTable
htmlTable(res)
ac
acf
acf(1:10)
