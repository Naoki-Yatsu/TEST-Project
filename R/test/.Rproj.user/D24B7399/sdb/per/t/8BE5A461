{
    "contents" : "#\n# ========================================================\n#    オブジェクトテスト\n# ========================================================\n\n##########################################\n############# iris（アヤメ）データはS3 ############\n##########################################\n#irisデータを読み込む\ndata(iris)\n\n#irisデータはどんなクラスに属している?\nclass(iris)\n\n#irisデータの構造を見てみる\nstr(iris)\n\n#クラス属性\nattributes(iris)\n\n#各クラス属性にアクセス\nattr(iris,\"names\")\n\n#クラス属性を取り除いて、中身を全て見てみる\nunclass(iris)\n\n#S3からデータを取り出す時は\"$\"を使う\niris$Sepal.Length\n\n\n#####################################################\n##  graphパッケージのテストデータであるapopGraphはS4　##\n#####################################################\n#apopGraphデータを読み込む\nlibrary(graph)\ndata(apopGraph)\n\n#apopGraphデータはどんなクラスに属している?\nclass(apopGraph)\n\n#apopGraphデータの構造を見てみる\nstr(apopGraph)\n\n#クラス属性\nattributes(apopGraph)\n\n#各クラス属性にアクセス\nattr(apopGraph,\"class\")\n\n#クラス属性を取り除いて、中身を全て見てみる\nunclass(apopGraph)\n\n#S4から各要素を取り出す時は\"@\"を使う\napopGraph@nodes\n\n#$だとエラー（$はS3だから）\napopGraph$nodes\n\n#################################################\n## AnntationDbiパッケージのloadDb関数に読み込まれた ###\n## データはR5になる ###########################\n##########################################\n\n#ライブラリ読み込み\nlibrary(\"AnnotationDbi\")\nlibrary(\"RSQLite\")\n\n#試しにGO.dbのデータを読み込んでみる\ndata <- loadDb(\n    system.file(\n        \"extdata\",\n        \"GO.sqlite\",\n        package=\"GO.db\",\n        lib.loc=\"/Library/Frameworks/R.framework/Versions/2.15/Resources/library/\"\n    ),\n    packageName=\"GO.db\"\n)\n\n# Windowsの場合\ndata <- loadDb(\n    system.file(\n        \"extdata\",\n        \"GO.sqlite\",\n        package=\"GO.db\",\n        lib.loc=\"C:/Users/ユーザー名/Documents/R/win-library/2.15/\"\n    ),\n    packageName=\"GO.db\"\n)\n\n#dataはどんなクラスに属している?\nclass(data)\n\n#dataの構造を見てみる\nstr(data)\n\n#クラス属性\nattributes(data)\n\n#各クラス属性にアクセス\nattr(data,\"class\")\n\n#クラス属性を取り除いて、中身を全て見てみる\n#R5はこの時に<S4 Type Object>って出てくるやつ\nunclass(data)\n\n#R5から各要素を取り出す時は\"$\"を使う\ndata$conn\n\n\n#\n#\n# STEP2 簡単なクラスを作って、継承したオブジェクトを生成してみる\n#\n#\n\n##########################################\n################## S3の場合 #################\n##########################################\n\n#3つのオブジェクトをリストで定義\ntaro <- list(name=\"Taro\",grade=4,sex=\"Male\", programming=T)\njiro <- list(name=\"Jiro\",grade=3,sex=\"Male\", programming=F)\nhanako <- list(name=\"Hanako\",grade=1,sex=\"Female\", programming=T)\n\n\n#studentというクラスに属しているという事を後付けで定義（ここがS3が駄目だと言われているところ）\nclass(taro) <- \"student\"\nclass(jiro) <- \"student\"\nclass(hanako) <- \"student\"\n\n#これから使うprintは汎用関数printを使ったものだと宣言\n#この行は無くても走る\nprint <- function(object){\n    UseMethod(\"print\")\n}\n\n#出力メソッドを定義（S3の場合はprint関数）\nprint.student <- function(object){\n    cat(\"This Student's name is\",object$name,\"\\n\",\n        object$name,\"'s grade is\",object$grade,\"\\n\",\n        object$name,\"'s sex is\",object$sex,\"\\n\")\n    if(object$programming){\n        cat(object$name,\"loves programming!!!\\n\")\n    }else{\n        cat(object$name,\"does not love programming....\\n\")\n    }\n}\n\n#studentクラスが実際にメソッドを持っている事を確認\nmethods(,\"student\")\n\n#3つのオブジェクトがstudentクラスを実際に継承しているか確認\ninherits(taro,\"student\")\ninherits(jiro,\"student\")\ninherits(hanako,\"student\")\n\n##########################################\n################## S4の場合 #################\n##########################################\n\n#まずstudentクラスを定義\n#ここで値の型や自分でチェック項目を設定できるから、継承時に間違った値を入力するとエラーを出す。\nsetClass(\"student\",\n         \n         #フィールド\n         representation(\n             name=\"character\",\n             grade=\"numeric\",\n             sex=\"character\",\n             programming=\"logical\"\n         ),\n         \n         #初期値(コンストラクタ)\n         prototype=prototype(\n             name=\"John Doe\",\n             grade=1,\n             sex=\"Male\",\n             programming=TRUE\n         ),\n         \n         #チェック項目\n         validity=function(object){\n             (nchar(object@name) >1)&&\n                 ((object@grade >= 1)&&(object@grade <= 4))&&\n                 ((object@sex==\"Male\")||(object@sex==\"Female\"))&&\n                 ((object@programming==TRUE)||\n                      (object@programming==FALSE))\n         }\n)\n\n#試しに何もパラメーターを与えずオブジェクト生成\n#John Doe(初期値）が出現\ntest <- new(\"student\")\ntest\n\n#これから使うshowは汎用関数showを使ったものだと宣言\n#この行は無くても走る\nsetGeneric(\"show\",\n           function(object) {\n               standardGeneric(\"show\")\n           }\n)\n\n\n#出力メソッドを定義\nsetMethod(\"show\",\"student\",\n          function(object){\n              cat(\"This Student's name is\",object@name,\"\\n\",\n                  object@name,\"'s grade is\",object@grade,\"\\n\",\n                  object@name,\"'s sex is\",object@sex,\"\\n\")\n              if(object@programming){\n                  cat(object@name,\"loves programming!!!\\n\")\n              }else{\n                  cat(object@name,\"does not love programming....\\n\")\n              }\n          }\n)\n\n#クラスを継承した3つのオブジェクトを生成\ntaro <- new(\"student\",name=\"Taro\",\n            grade=4,sex=\"Male\",programming=T)\njiro <- new(\"student\",name=\"Jiro\",\n            grade=3,sex=\"Male\",programming=F)\nhanako <- new(\"student\",name=\"Hanako\",\n              grade=1,sex=\"Female\",programming=T)\n\n\n#3つのオブジェクトがstudentクラスを実際に継承しているか確認\ninherits(taro,\"student\")\ninherits(jiro,\"student\")\ninherits(hanako,\"student\")\n\n#間違ったパラメーターを与えて、オブジェクト生成すると、エラーを出してくれる\nkazuo <- new(\"student\",name=\"Kazuo\",grade=5,\n             sex=\"Male\",programming=F)\n\n##########################################\n################## R5の場合 #################\n##########################################\n\n#studentクラスを定義 (Javaっぽい）\nst <- setRefClass(\n    \n    #クラス名を定義\n    Class = \"student\",\n    \n    #フィールドを定義\n    fields=list(\n        name=\"character\",\n        grade=\"numeric\",\n        sex=\"character\",\n        programming=\"logical\"\n    ),    \n    \n    #メソッドを定義\n    methods = list(\n        \n        #出力メソッド\n        output = function(){\n            cat(\"This Student's name is\",name,\"\\n\",\n                name,\"'s grade is\",grade,\"\\n\",\n                name,\"'s sex is\",sex,\"\\n\")\n            if(programming){\n                cat(name,\"loves programming!!!\\n\")\n            }else{\n                cat(name,\"does not love programming....\\n\")\n            }\n        }\n    )\n)\n\n#クラスを継承した3つのオブジェクトを生成\ntaro <- st$new(name=\"Taro\", grade=4, sex=\"Male\", programming=TRUE)\njiro <- st$new(name=\"Jiro\", grade=3, sex=\"Male\", programming=FALSE)\nhanako <- st$new(name=\"Hanako\", grade=1, sex=\"Female\", programming=TRUE)\n\n\n#出力してみる\ntaro$output()\njiro$output()\nhanako$output()\n\n\n#3つのオブジェクトがstudentクラスを実際に継承しているか確認\ninherits(taro,\"student\")\ninherits(jiro,\"student\")\ninherits(hanako,\"student\")\n\n\n",
    "created" : 1410874669329.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "239031823",
    "id" : "8BE5A461",
    "lastKnownWriteTime" : 1410879022,
    "path" : "J:/git/Analysis/R/test/test_object.R",
    "project_path" : "test_object.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}