data(iris)
class(iris)
str(iris)
attr(iris,"names")
unclass(iris)
iris$Sepal.Length
library(graph)
library(graph)
install.packages("Rgraphviz")
data(apopGraph)
AirPassengers
class(AirPassengers)
data(AirPassengers)
data(AirPassengers)
apopGraph <- AirPassengers
str(apopGraph)
apopGraph@nodes
library("AnnotationDbi")
install.packages("AnnotationDbi")
install.packages("RSQLite")
install.packages("graph")
library("AnnotationDbi")
library("RSQLite")
library("RSQLite")
data <- loadDb(
system.file(
"extdata",
"GO.sqlite",
package="GO.db",
lib.loc="/Library/Frameworks/R.framework/Versions/2.15/Resources/library/"
),
packageName="GO.db"
)
loadDb
taro <- list(name="Taro",grade=4,sex="Male", programming=T)
jiro <- list(name="Jiro",grade=3,sex="Male", programming=F)
hanako <- list(name="Hanako",grade=1,sex="Female", programming=T)
#studentというクラスに属しているという事を後付けで定義（ここがS3が駄目だと言われているところ）
class(taro) <- "student"
class(jiro) <- "student"
class(hanako) <- "student"
class(taro) <- "student"
class(jiro) <- "student"
class(hanako) <- "student"
print
print <- function(object){
UseMethod("print")
}
print.student <- function(object){
cat("This Student's name is",object$name,"\n",
object$name,"'s grade is",object$grade,"\n",
object$name,"'s sex is",object$sex,"\n")
if(object$programming){
cat(object$name,"loves programming!!!\n")
}else{
cat(object$name,"does not love programming....\n")
}
}
methods(,"student")
methods(,"student")
inherits(taro,"student")
inherits(jiro,"student")
inherits(hanako,"student")
methods(,"student")
setClass("student",
#フィールド
representation(
name="character",
grade="numeric",
sex="character",
programming="logical"
),
#初期値(コンストラクタ)
prototype=prototype(
name="John Doe",
grade=1,
sex="Male",
programming=TRUE
),
#チェック項目
validity=function(object){
(nchar(object@name) >1)&&
((object@grade >= 1)&&(object@grade <= 4))&&
((object@sex=="Male")||(object@sex=="Female"))&&
((object@programming==TRUE)||
(object@programming==FALSE))
}
)
test <- new("student")
setGeneric("show",
function(object) {
standardGeneric("show")
}
)
setMethod("show","student",
function(object){
cat("This Student's name is",object@name,"\n",
object@name,"'s grade is",object@grade,"\n",
object@name,"'s sex is",object@sex,"\n")
if(object@programming){
cat(object@name,"loves programming!!!\n")
}else{
cat(object@name,"does not love programming....\n")
}
}
)
taro <- new("student",name="Taro",
grade=4,sex="Male",programming=T)
jiro <- new("student",name="Jiro",
grade=3,sex="Male",programming=F)
hanako <- new("student",name="Hanako",
grade=1,sex="Female",programming=T)
inherits(taro,"student")
inherits(jiro,"student")
inherits(hanako,"student")
kazuo <- new("student",name="Kazuo",grade=5,
sex="Male",programming=F)
st <- setRefClass(
#クラス名を定義
Class = "student",
#フィールドを定義
fields=list(
name="character",
grade="numeric",
sex="character",
programming="logical"
),
#メソッドを定義
methods = list(
#出力メソッド
output = function(){
cat("This Student's name is",name,"\n",
name,"'s grade is",grade,"\n",
name,"'s sex is",sex,"\n")
if(programming){
cat(name,"loves programming!!!\n")
}else{
cat(name,"does not love programming....\n")
}
}
)
)
taro <- st$new(name="Taro", grade=4,sex="Male",programming=TRUE)
jiro <- st$new(name="Jiro", grade=3,sex="Male",programming=FALSE)
hanako <- st$new(name="Hanako", grade=1,sex="Female",programming=TRUE)
taro <- st$new(name="Taro", grade=4,sex="Male",programming=TRUE)
jiro <- st$new(name="Jiro", grade=3,sex="Male",programming=FALSE)
hanako <- st$new(name="Hanako", grade=1,sex="Female",programming=TRUE)
#出力してみる
st <- setRefClass(
#クラス名を定義
Class = "student",
#フィールドを定義
fields=list(
name="character",
grade="numeric",
sex="character",
programming="logical"
),
#メソッドを定義
methods = list(
#出力メソッド
output = function(){
cat("This Student's name is",name,"\n",
name,"'s grade is",grade,"\n",
name,"'s sex is",sex,"\n")
if(programming){
cat(name,"loves programming!!!\n")
}else{
cat(name,"does not love programming....\n")
}
}
)
)
taro <- st$new(name="Taro", grade=4,sex="Male",programming=T)
RUE
jiro <- st$new(name="Jiro", grade=3,sex="Male",programming=FALSE)
hanako <- st$new(name="Hanako", grade=1,sex="Female",programming=TRUE)
taro$output()
#studentクラスを定義 (Javaっぽい）
st <- setRefClass(
#クラス名を定義
Class = "student",
#フィールドを定義
fields=list(
name="character",
grade="numeric",
sex="character",
programming="logical"
),
#メソッドを定義
methods = list(
#出力メソッド
output = function(){
cat("This Student's name is",name,"\n",
name,"'s grade is",grade,"\n",
name,"'s sex is",sex,"\n")
if(programming){
cat(name,"loves programming!!!\n")
}else{
cat(name,"does not love programming....\n")
}
}
)
)
taro <- st$new(name="Taro", grade=4,sex="Male",programming=TRUE)
tc <- setRefClass(Class="testClass",
fields = list(f1="numeric", f2="numeric"),
methods = list(
foo = function() {
"f1とf2を足し合わせるメソッド"
f1 + f2
}))
test <- tc$new(f1=1, f2=2)
tc$accessors("f1", "f2")
tc$help(foo)
tc$methods(
bar=function(x){
f1 <<- f1 + x
})
test$foo()
test$bar(10)
test$getF1()
test$foo()
test$setF2(5)
acf
1:10
acf(1:10)
install.packages(c("evaluate", "formatR", "highr", "manipulate", "plyr"))
install.packages(c("caret", "knitr", "manipulate", "markdown", "numDeriv", "Quandl", "Rcpp", "RCurl", "rmarkdown", "stringr"))
install.packages("manipulate")
install.packages("manipulate")
